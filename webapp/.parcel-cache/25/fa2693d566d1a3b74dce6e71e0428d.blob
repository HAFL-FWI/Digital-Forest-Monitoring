"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asserts = require("../../asserts.js");

var _Filter = _interopRequireDefault(require("./Filter.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
/**
 * @module ol/format/filter/LogicalNary
 */


/**
 * @classdesc
 * Abstract class; normally only used for creating subclasses and not instantiated in apps.
 * Base class for WFS GetFeature n-ary logical filters.
 *
 * @abstract
 */
var LogicalNary =
/** @class */
function (_super) {
  __extends(LogicalNary, _super);
  /**
   * @param {!string} tagName The XML tag name for this filter.
   * @param {Array<import("./Filter.js").default>} conditions Conditions.
   */


  function LogicalNary(tagName, conditions) {
    var _this = _super.call(this, tagName) || this;
    /**
     * @type {Array<import("./Filter.js").default>}
     */


    _this.conditions = conditions;
    (0, _asserts.assert)(_this.conditions.length >= 2, 57); // At least 2 conditions are required.

    return _this;
  }

  return LogicalNary;
}(_Filter.default);

var _default = LogicalNary;
exports.default = _default;