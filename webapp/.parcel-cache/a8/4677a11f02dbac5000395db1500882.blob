"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dialog = exports.textField = exports.init = void 0;

var _dialog = require("@material/dialog");

var _ripple = require("@material/ripple");

var _textfield = require("@material/textfield");

var _icon = require("@material/textfield/icon");

var _router = require("./router");

var _main_util = require("./main_util");

var _viewer_util = _interopRequireDefault(require("./viewer_util"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const init = () => {
  (0, _router.initRouter)();
  /*
   * normalize css vh to have correct height on mobile devices.
   * credits: https://css-tricks.com/the-trick-to-viewport-units-on-mobile/
   */

  let vh = window.innerHeight * 0.01; //set the value in the --vh custom property to the root of the document

  document.documentElement.style.setProperty("--vh", `${vh}px`);
  window.addEventListener("resize", () => {
    // We execute the same script as before
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty("--vh", `${vh}px`);
  });
};

exports.init = init;
const ripples = [].map.call(document.querySelectorAll(".mdc-button, .mdc-card__primary-action"), el => {
  return new _ripple.MDCRipple(el);
});
/*
 * init and handle events for the search input
 */

const textField = new _textfield.MDCTextField(document.querySelector(".mdc-text-field"));
exports.textField = textField;
textField.listen("input", _viewer_util.default.controller.performSearch);
textField.listen("keydown", e => {
  if (e.key === "ArrowDown") {
    const firstElement = document.getElementsByClassName("mdc-list-item")[0];
    firstElement.focus();
    window.requestAnimationFrame(() => {
      firstElement.scrollIntoView();
    });
  }
});
textField.listen("focusin", () => {
  textField.value = "";
});
const textFieldIcon = new _icon.MDCTextFieldIcon(document.querySelector(".text-field-clear__icon"));
textFieldIcon.listen("click", () => {
  _viewer_util.default.controller.closeSearchResults(_main_util.searchResults);

  textField.value = "";
  (0, _main_util.removeGeojsonOverlays)(_viewer_util.default.model.map);
});
/*
 * init and handle events for the modal dialog
 */

const dialog = new _dialog.MDCDialog(document.querySelector(".mdc-dialog"));
exports.dialog = dialog;
document.getElementById("impressum-button").addEventListener("click", () => {
  _main_util.dialogTitle.innerHTML = _main_util.impressum.tite;
  _main_util.dialogContent.innerHTML = _main_util.impressum.content;
  dialog.open();
});
/* event listener to set the map height when browser gets resized.
 * neccessary because is possible that the topAppBar change it's height.
 */

window.addEventListener("resize", () => {
  (0, _main_util.setTitle)((0, _main_util.getTitle)());
});
/*
 * event listener to close the sidebar
 */

const sidebarClose = document.querySelector(".sidebar__close");
sidebarClose.addEventListener("click", _main_util.closeSidebar);