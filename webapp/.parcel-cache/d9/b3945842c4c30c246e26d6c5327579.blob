"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _control = require("ol/control");

var _basemapOrtho = _interopRequireDefault(require("../img/basemapOrtho.jpg"));

var _sw = _interopRequireDefault(require("../img/sw.jpg"));

var _basemap_util = require("./basemap_util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class BasemapControl {
  constructor(map = null, active = "Orthofoto") {
    this.map = map;
    this.active = active;
    this.basemaps = [{
      name: "Orthofoto",
      visible: true,
      image: _basemapOrtho.default,
      layer: _basemap_util.orthoBasemap
    }, {
      name: "Karte SW",
      visible: false,
      image: _sw.default,
      layer: _basemap_util.swBasemap
    }];
  }

  createBasemapControl() {
    const [activeBasemap, iconBasemap] = this.getBasemapState(this.active); //show the currently active basemap

    activeBasemap.layer.setVisible(true);
    const basemapFragment = new DocumentFragment();
    this.basemapControl = document.createElement("div");
    this.basemapControl.appendChild(this.createBasemap(iconBasemap));
    basemapFragment.appendChild(this.basemapControl);
    this.basemapControl.className = "basemapControl";
    const basemapSwitch = new _control.Control({
      element: basemapFragment
    });
    return basemapSwitch;
  }
  /*
   * creates a clickable basemap item
   * @param {object} basemapObject -  with important properties like name,image,visible ...
   * @returns {domElement} besemap - a clickable basemap div.
   */


  createBasemap(basemapObject) {
    const basemap = document.createElement("div");
    basemap.title = basemapObject.visible ? "VerfÃ¼gbare Hintergrundkarten anzeigen" : "Hintergrundkarte wechseln";
    basemap.classList.add("basemap");
    basemap.style.backgroundImage = `url(${basemapObject.image})`;
    const basemapTitle = document.createElement("div");
    basemapTitle.classList.add("basemapControl__title");
    basemapTitle.innerHTML = basemapObject.name;
    basemap.appendChild(basemapTitle);
    basemap.addEventListener("click", e => {
      e.preventDefault();
      this.basemapControl.classList.remove("animate");
      /* triggering a reflow after the removing of the animate class,
       * will make the animation work withou a setTimeout().
       */

      void this.basemapControl.offsetWidth;
      this.basemapControl.classList.add("animate");
      const [newBasemap, iconBasemap] = this.getBasemapState(basemapObject.name);
      this.basemapControl.firstChild.remove();
      this.basemapControl.appendChild(this.createBasemap(iconBasemap));
      iconBasemap.layer.setVisible(false);
      newBasemap.layer.setVisible(true);
    }, false);
    return basemap;
  }
  /*
   * gets the basemap object to display on the map and the one to display in the switch
   * @param {string} basemapName - the name of the clicked basemap, e.g. the new basemap to display
   * @returns {array} - the new basemap to display and the one to show in the basemap toggle.
   */


  getBasemapState(basemapName) {
    const newBasemap = this.basemaps.filter(item => item.name === basemapName)[0];
    const iconBasemap = this.basemaps.filter(item => item.name !== basemapName)[0];
    return [newBasemap, iconBasemap];
  }

}

var _default = BasemapControl;
exports.default = _default;