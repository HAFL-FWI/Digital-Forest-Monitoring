"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultImageLoadFunction = defaultImageLoadFunction;
exports.default = exports.ImageSourceEvent = void 0;

var _util = require("../util.js");

var _common = require("../reproj/common.js");

var _ImageState = _interopRequireDefault(require("../ImageState.js"));

var _array = require("../array.js");

var _Event = _interopRequireDefault(require("../events/Event.js"));

var _extent = require("../extent.js");

var _proj = require("../proj.js");

var _Image = _interopRequireDefault(require("../reproj/Image.js"));

var _Source = _interopRequireDefault(require("./Source.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
/**
 * @module ol/source/Image
 */


/**
 * @enum {string}
 */
var ImageSourceEventType = {
  /**
   * Triggered when an image starts loading.
   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart
   * @api
   */
  IMAGELOADSTART: 'imageloadstart',

  /**
   * Triggered when an image finishes loading.
   * @event module:ol/source/Image.ImageSourceEvent#imageloadend
   * @api
   */
  IMAGELOADEND: 'imageloadend',

  /**
   * Triggered if image loading results in an error.
   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror
   * @api
   */
  IMAGELOADERROR: 'imageloaderror'
};
/**
 * @classdesc
 * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this
 * type.
 */

var ImageSourceEvent =
/** @class */
function (_super) {
  __extends(ImageSourceEvent, _super);
  /**
   * @param {string} type Type.
   * @param {import("../Image.js").default} image The image.
   */


  function ImageSourceEvent(type, image) {
    var _this = _super.call(this, type) || this;
    /**
     * The image related to the event.
     * @type {import("../Image.js").default}
     * @api
     */


    _this.image = image;
    return _this;
  }

  return ImageSourceEvent;
}(_Event.default);

exports.ImageSourceEvent = ImageSourceEvent;

/**
 * @typedef {Object} Options
 * @property {import("./Source.js").AttributionLike} [attributions]
 * @property {import("../proj.js").ProjectionLike} [projection]
 * @property {Array<number>} [resolutions]
 * @property {import("./State.js").default} [state]
 */

/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for sources providing a single image.
 * @abstract
 * @fires module:ol/source/Image.ImageSourceEvent
 * @api
 */
var ImageSource =
/** @class */
function (_super) {
  __extends(ImageSource, _super);
  /**
   * @param {Options} options Single image source options.
   */


  function ImageSource(options) {
    var _this = _super.call(this, {
      attributions: options.attributions,
      projection: options.projection,
      state: options.state
    }) || this;
    /**
     * @private
     * @type {Array<number>}
     */


    _this.resolutions_ = options.resolutions !== undefined ? options.resolutions : null;
    /**
     * @private
     * @type {import("../reproj/Image.js").default}
     */

    _this.reprojectedImage_ = null;
    /**
     * @private
     * @type {number}
     */

    _this.reprojectedRevision_ = 0;
    return _this;
  }
  /**
   * @return {Array<number>} Resolutions.
   * @override
   */


  ImageSource.prototype.getResolutions = function () {
    return this.resolutions_;
  };
  /**
   * @protected
   * @param {number} resolution Resolution.
   * @return {number} Resolution.
   */


  ImageSource.prototype.findNearestResolution = function (resolution) {
    if (this.resolutions_) {
      var idx = (0, _array.linearFindNearest)(this.resolutions_, resolution, 0);
      resolution = this.resolutions_[idx];
    }

    return resolution;
  };
  /**
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {import("../ImageBase.js").default} Single image.
   */


  ImageSource.prototype.getImage = function (extent, resolution, pixelRatio, projection) {
    var sourceProjection = this.getProjection();

    if (!_common.ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || (0, _proj.equivalent)(sourceProjection, projection)) {
      if (sourceProjection) {
        projection = sourceProjection;
      }

      return this.getImageInternal(extent, resolution, pixelRatio, projection);
    } else {
      if (this.reprojectedImage_) {
        if (this.reprojectedRevision_ == this.getRevision() && (0, _proj.equivalent)(this.reprojectedImage_.getProjection(), projection) && this.reprojectedImage_.getResolution() == resolution && (0, _extent.equals)(this.reprojectedImage_.getExtent(), extent)) {
          return this.reprojectedImage_;
        }

        this.reprojectedImage_.dispose();
        this.reprojectedImage_ = null;
      }

      this.reprojectedImage_ = new _Image.default(sourceProjection, projection, extent, resolution, pixelRatio, function (extent, resolution, pixelRatio) {
        return this.getImageInternal(extent, resolution, pixelRatio, sourceProjection);
      }.bind(this));
      this.reprojectedRevision_ = this.getRevision();
      return this.reprojectedImage_;
    }
  };
  /**
   * @abstract
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("../proj/Projection.js").default} projection Projection.
   * @return {import("../ImageBase.js").default} Single image.
   * @protected
   */


  ImageSource.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {
    return (0, _util.abstract)();
  };
  /**
   * Handle image change events.
   * @param {import("../events/Event.js").default} event Event.
   * @protected
   */


  ImageSource.prototype.handleImageChange = function (event) {
    var image =
    /** @type {import("../Image.js").default} */
    event.target;

    switch (image.getState()) {
      case _ImageState.default.LOADING:
        this.loading = true;
        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADSTART, image));
        break;

      case _ImageState.default.LOADED:
        this.loading = false;
        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADEND, image));
        break;

      case _ImageState.default.ERROR:
        this.loading = false;
        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADERROR, image));
        break;

      default: // pass

    }
  };

  return ImageSource;
}(_Source.default);
/**
 * Default image load function for image sources that use import("../Image.js").Image image
 * instances.
 * @param {import("../Image.js").default} image Image.
 * @param {string} src Source.
 */


function defaultImageLoadFunction(image, src) {
  /** @type {HTMLImageElement|HTMLVideoElement} */
  image.getImage().src = src;
}

var _default = ImageSource;
exports.default = _default;