{"id":"../node_modules/ol/Image.js","dependencies":[{"name":"/Users/hk/Sites/digital-forest-monitoring/package.json","includedInParent":true,"mtime":1574333047455},{"name":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/package.json","includedInParent":true,"mtime":1573122283680},{"name":"./ImageBase.js","loc":{"line":17,"column":22},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/Image.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/ImageBase.js"},{"name":"./ImageState.js","loc":{"line":18,"column":23},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/Image.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/ImageState.js"},{"name":"./events.js","loc":{"line":19,"column":42},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/Image.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/events.js"},{"name":"./events/EventType.js","loc":{"line":20,"column":22},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/Image.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/events/EventType.js"},{"name":"./extent.js","loc":{"line":21,"column":26},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/Image.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/extent.js"},{"name":"./has.js","loc":{"line":22,"column":29},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/Image.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/has.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.listenImage = listenImage;\nexports.default = void 0;\n\nvar _ImageBase = _interopRequireDefault(require(\"./ImageBase.js\"));\n\nvar _ImageState = _interopRequireDefault(require(\"./ImageState.js\"));\n\nvar _events = require(\"./events.js\");\n\nvar _EventType = _interopRequireDefault(require(\"./events/EventType.js\"));\n\nvar _extent = require(\"./extent.js\");\n\nvar _has = require(\"./has.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __extends = void 0 && (void 0).__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Image\n */\n\n\n/**\n * A function that takes an {@link module:ol/Image~Image} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~Image#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(ImageWrapper, string): void} LoadFunction\n * @api\n */\nvar ImageWrapper =\n/** @class */\nfunction (_super) {\n  __extends(ImageWrapper, _super);\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {LoadFunction} imageLoadFunction Image load function.\n   */\n\n\n  function ImageWrapper(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {\n    var _this = _super.call(this, extent, resolution, pixelRatio, _ImageState.default.IDLE) || this;\n    /**\n     * @private\n     * @type {string}\n     */\n\n\n    _this.src_ = src;\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n\n    _this.image_ = new Image();\n\n    if (crossOrigin !== null) {\n      _this.image_.crossOrigin = crossOrigin;\n    }\n    /**\n     * @private\n     * @type {?function():void}\n     */\n\n\n    _this.unlisten_ = null;\n    /**\n     * @protected\n     * @type {ImageState}\n     */\n\n    _this.state = _ImageState.default.IDLE;\n    /**\n     * @private\n     * @type {LoadFunction}\n     */\n\n    _this.imageLoadFunction_ = imageLoadFunction;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  ImageWrapper.prototype.getImage = function () {\n    return this.image_;\n  };\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n\n\n  ImageWrapper.prototype.handleImageError_ = function () {\n    this.state = _ImageState.default.ERROR;\n    this.unlistenImage_();\n    this.changed();\n  };\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n\n\n  ImageWrapper.prototype.handleImageLoad_ = function () {\n    if (this.resolution === undefined) {\n      this.resolution = (0, _extent.getHeight)(this.extent) / this.image_.height;\n    }\n\n    this.state = _ImageState.default.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  };\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @override\n   * @api\n   */\n\n\n  ImageWrapper.prototype.load = function () {\n    if (this.state == _ImageState.default.IDLE || this.state == _ImageState.default.ERROR) {\n      this.state = _ImageState.default.LOADING;\n      this.changed();\n      this.imageLoadFunction_(this, this.src_);\n      this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));\n    }\n  };\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   */\n\n\n  ImageWrapper.prototype.setImage = function (image) {\n    this.image_ = image;\n  };\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n\n\n  ImageWrapper.prototype.unlistenImage_ = function () {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  };\n\n  return ImageWrapper;\n}(_ImageBase.default);\n/**\n * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\n\n\nfunction listenImage(image, loadHandler, errorHandler) {\n  var img =\n  /** @type {HTMLImageElement} */\n  image;\n\n  if (img.src && _has.IMAGE_DECODE) {\n    var promise = img.decode();\n    var listening_1 = true;\n\n    var unlisten = function () {\n      listening_1 = false;\n    };\n\n    promise.then(function () {\n      if (listening_1) {\n        loadHandler();\n      }\n    }).catch(function (error) {\n      if (listening_1) {\n        // FIXME: Unconditionally call errorHandler() when this bug is fixed upstream:\n        //        https://bugs.webkit.org/show_bug.cgi?id=198527\n        if (error.name === 'EncodingError' && error.message === 'Invalid image type.') {\n          loadHandler();\n        } else {\n          errorHandler();\n        }\n      }\n    });\n    return unlisten;\n  }\n\n  var listenerKeys = [(0, _events.listenOnce)(img, _EventType.default.LOAD, loadHandler), (0, _events.listenOnce)(img, _EventType.default.ERROR, errorHandler)];\n  return function unlisten() {\n    listenerKeys.forEach(_events.unlistenByKey);\n  };\n}\n\nvar _default = ImageWrapper;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"95de378c3245ef613501d19175a77530","cacheData":{"env":{}}}