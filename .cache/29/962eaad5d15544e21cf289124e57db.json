{"id":"../node_modules/@material/notched-outline/component.js","dependencies":[{"name":"/Users/hk/Sites/digital-forest-monitoring/package.json","includedInParent":true,"mtime":1574333047455},{"name":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/notched-outline/package.json","includedInParent":true,"mtime":1574003374152},{"name":"tslib","loc":{"line":23,"column":25},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/notched-outline/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/tslib/tslib.es6.js"},{"name":"@material/base/component","loc":{"line":24,"column":29},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/notched-outline/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/base/component.js"},{"name":"@material/floating-label/foundation","loc":{"line":25,"column":43},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/notched-outline/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/floating-label/foundation.js"},{"name":"./constants","loc":{"line":26,"column":36},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/notched-outline/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/notched-outline/constants.js"},{"name":"./foundation","loc":{"line":27,"column":44},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/notched-outline/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/notched-outline/foundation.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MDCNotchedOutline = void 0;\n\nvar tslib_1 = _interopRequireWildcard(require(\"tslib\"));\n\nvar _component = require(\"@material/base/component\");\n\nvar _foundation = require(\"@material/floating-label/foundation\");\n\nvar _constants = require(\"./constants\");\n\nvar _foundation2 = require(\"./foundation\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar MDCNotchedOutline =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCNotchedOutline, _super);\n\n  function MDCNotchedOutline() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCNotchedOutline.attachTo = function (root) {\n    return new MDCNotchedOutline(root);\n  };\n\n  MDCNotchedOutline.prototype.initialSyncWithDOM = function () {\n    this.notchElement_ = this.root_.querySelector(_constants.strings.NOTCH_ELEMENT_SELECTOR);\n    var label = this.root_.querySelector('.' + _foundation.MDCFloatingLabelFoundation.cssClasses.ROOT);\n\n    if (label) {\n      label.style.transitionDuration = '0s';\n      this.root_.classList.add(_constants.cssClasses.OUTLINE_UPGRADED);\n      requestAnimationFrame(function () {\n        label.style.transitionDuration = '';\n      });\n    } else {\n      this.root_.classList.add(_constants.cssClasses.NO_LABEL);\n    }\n  };\n  /**\n   * Updates classes and styles to open the notch to the specified width.\n   * @param notchWidth The notch width in the outline.\n   */\n\n\n  MDCNotchedOutline.prototype.notch = function (notchWidth) {\n    this.foundation_.notch(notchWidth);\n  };\n  /**\n   * Updates classes and styles to close the notch.\n   */\n\n\n  MDCNotchedOutline.prototype.closeNotch = function () {\n    this.foundation_.closeNotch();\n  };\n\n  MDCNotchedOutline.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = {\n      addClass: function (className) {\n        return _this.root_.classList.add(className);\n      },\n      removeClass: function (className) {\n        return _this.root_.classList.remove(className);\n      },\n      setNotchWidthProperty: function (width) {\n        return _this.notchElement_.style.setProperty('width', width + 'px');\n      },\n      removeNotchWidthProperty: function () {\n        return _this.notchElement_.style.removeProperty('width');\n      }\n    }; // tslint:enable:object-literal-sort-keys\n\n    return new _foundation2.MDCNotchedOutlineFoundation(adapter);\n  };\n\n  return MDCNotchedOutline;\n}(_component.MDCComponent);\n\nexports.MDCNotchedOutline = MDCNotchedOutline;"},"sourceMaps":null,"error":null,"hash":"ff0c71b3fc8a2f42a7d2a9553f78f0e1","cacheData":{"env":{}}}