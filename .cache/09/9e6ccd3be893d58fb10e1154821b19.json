{"id":"../node_modules/@material/switch/component.js","dependencies":[{"name":"/Users/hk/Sites/digital-forest-monitoring/package.json","includedInParent":true,"mtime":1574333047455},{"name":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/switch/package.json","includedInParent":true,"mtime":1573201642747},{"name":"tslib","loc":{"line":23,"column":25},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/switch/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/tslib/tslib.es6.js"},{"name":"@material/base/component","loc":{"line":24,"column":29},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/switch/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/base/component.js"},{"name":"@material/dom/events","loc":{"line":25,"column":29},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/switch/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/dom/events.js"},{"name":"@material/dom/ponyfill","loc":{"line":26,"column":24},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/switch/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/dom/ponyfill.js"},{"name":"@material/ripple/component","loc":{"line":27,"column":26},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/switch/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/ripple/component.js"},{"name":"@material/ripple/foundation","loc":{"line":28,"column":36},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/switch/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/ripple/foundation.js"},{"name":"./foundation","loc":{"line":29,"column":36},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/switch/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/switch/foundation.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MDCSwitch = void 0;\n\nvar tslib_1 = _interopRequireWildcard(require(\"tslib\"));\n\nvar _component = require(\"@material/base/component\");\n\nvar _events = require(\"@material/dom/events\");\n\nvar _ponyfill = require(\"@material/dom/ponyfill\");\n\nvar _component2 = require(\"@material/ripple/component\");\n\nvar _foundation = require(\"@material/ripple/foundation\");\n\nvar _foundation2 = require(\"./foundation\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar MDCSwitch =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCSwitch, _super);\n\n  function MDCSwitch() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.ripple_ = _this.createRipple_();\n    return _this;\n  }\n\n  MDCSwitch.attachTo = function (root) {\n    return new MDCSwitch(root);\n  };\n\n  MDCSwitch.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.ripple_.destroy();\n    this.nativeControl_.removeEventListener('change', this.changeHandler_);\n  };\n\n  MDCSwitch.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.changeHandler_ = function () {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return (_a = _this.foundation_).handleChange.apply(_a, tslib_1.__spread(args));\n    };\n\n    this.nativeControl_.addEventListener('change', this.changeHandler_); // Sometimes the checked state of the input element is saved in the history.\n    // The switch styling should match the checked state of the input element.\n    // Do an initial sync between the native control and the foundation.\n\n    this.checked = this.checked;\n  };\n\n  MDCSwitch.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      addClass: function (className) {\n        return _this.root_.classList.add(className);\n      },\n      removeClass: function (className) {\n        return _this.root_.classList.remove(className);\n      },\n      setNativeControlChecked: function (checked) {\n        return _this.nativeControl_.checked = checked;\n      },\n      setNativeControlDisabled: function (disabled) {\n        return _this.nativeControl_.disabled = disabled;\n      }\n    };\n    return new _foundation2.MDCSwitchFoundation(adapter);\n  };\n\n  Object.defineProperty(MDCSwitch.prototype, \"ripple\", {\n    get: function () {\n      return this.ripple_;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSwitch.prototype, \"checked\", {\n    get: function () {\n      return this.nativeControl_.checked;\n    },\n    set: function (checked) {\n      this.foundation_.setChecked(checked);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSwitch.prototype, \"disabled\", {\n    get: function () {\n      return this.nativeControl_.disabled;\n    },\n    set: function (disabled) {\n      this.foundation_.setDisabled(disabled);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCSwitch.prototype.createRipple_ = function () {\n    var _this = this;\n\n    var RIPPLE_SURFACE_SELECTOR = _foundation2.MDCSwitchFoundation.strings.RIPPLE_SURFACE_SELECTOR;\n    var rippleSurface = this.root_.querySelector(RIPPLE_SURFACE_SELECTOR); // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n    var adapter = tslib_1.__assign({}, _component2.MDCRipple.createAdapter(this), {\n      addClass: function (className) {\n        return rippleSurface.classList.add(className);\n      },\n      computeBoundingRect: function () {\n        return rippleSurface.getBoundingClientRect();\n      },\n      deregisterInteractionHandler: function (evtType, handler) {\n        _this.nativeControl_.removeEventListener(evtType, handler, (0, _events.applyPassive)());\n      },\n      isSurfaceActive: function () {\n        return (0, _ponyfill.matches)(_this.nativeControl_, ':active');\n      },\n      isUnbounded: function () {\n        return true;\n      },\n      registerInteractionHandler: function (evtType, handler) {\n        _this.nativeControl_.addEventListener(evtType, handler, (0, _events.applyPassive)());\n      },\n      removeClass: function (className) {\n        return rippleSurface.classList.remove(className);\n      },\n      updateCssVariable: function (varName, value) {\n        rippleSurface.style.setProperty(varName, value);\n      }\n    });\n\n    return new _component2.MDCRipple(this.root_, new _foundation.MDCRippleFoundation(adapter));\n  };\n\n  Object.defineProperty(MDCSwitch.prototype, \"nativeControl_\", {\n    get: function () {\n      var NATIVE_CONTROL_SELECTOR = _foundation2.MDCSwitchFoundation.strings.NATIVE_CONTROL_SELECTOR;\n      return this.root_.querySelector(NATIVE_CONTROL_SELECTOR);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MDCSwitch;\n}(_component.MDCComponent);\n\nexports.MDCSwitch = MDCSwitch;"},"sourceMaps":null,"error":null,"hash":"f648b6a5ad71586872b0be946b5b2f04","cacheData":{"env":{}}}