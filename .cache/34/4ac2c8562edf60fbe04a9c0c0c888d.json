{"id":"../node_modules/@material/top-app-bar/fixed/foundation.js","dependencies":[{"name":"/Users/hk/Sites/digital-forest-monitoring/package.json","includedInParent":true,"mtime":1574333047455},{"name":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/top-app-bar/package.json","includedInParent":true,"mtime":1573028242885},{"name":"tslib","loc":{"line":23,"column":25},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/top-app-bar/fixed/foundation.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/tslib/tslib.es6.js"},{"name":"../constants","loc":{"line":24,"column":27},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/top-app-bar/fixed/foundation.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/top-app-bar/constants.js"},{"name":"../standard/foundation","loc":{"line":25,"column":39},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/top-app-bar/fixed/foundation.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/top-app-bar/standard/foundation.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.MDCFixedTopAppBarFoundation = void 0;\n\nvar tslib_1 = _interopRequireWildcard(require(\"tslib\"));\n\nvar _constants = require(\"../constants\");\n\nvar _foundation = require(\"../standard/foundation\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar MDCFixedTopAppBarFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCFixedTopAppBarFoundation, _super);\n\n  function MDCFixedTopAppBarFoundation() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * State variable for the previous scroll iteration top app bar state\n     */\n\n\n    _this.wasScrolled_ = false;\n    return _this;\n  }\n  /**\n   * Scroll handler for applying/removing the modifier class on the fixed top app bar.\n   * @override\n   */\n\n\n  MDCFixedTopAppBarFoundation.prototype.handleTargetScroll = function () {\n    var currentScroll = this.adapter_.getViewportScrollY();\n\n    if (currentScroll <= 0) {\n      if (this.wasScrolled_) {\n        this.adapter_.removeClass(_constants.cssClasses.FIXED_SCROLLED_CLASS);\n        this.wasScrolled_ = false;\n      }\n    } else {\n      if (!this.wasScrolled_) {\n        this.adapter_.addClass(_constants.cssClasses.FIXED_SCROLLED_CLASS);\n        this.wasScrolled_ = true;\n      }\n    }\n  };\n\n  return MDCFixedTopAppBarFoundation;\n}(_foundation.MDCTopAppBarFoundation);\n\nexports.MDCFixedTopAppBarFoundation = MDCFixedTopAppBarFoundation;\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nvar _default = MDCFixedTopAppBarFoundation;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"29ad6fcee44759bb1dbb9900feca0a89","cacheData":{"env":{}}}