{"id":"../node_modules/ol/interaction/Extent.js","dependencies":[{"name":"/Users/hk/Sites/digital-forest-monitoring/package.json","includedInParent":true,"mtime":1574333047455},{"name":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/package.json","includedInParent":true,"mtime":1573122283680},{"name":"../Feature.js","loc":{"line":17,"column":20},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/interaction/Extent.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/Feature.js"},{"name":"../MapBrowserEventType.js","loc":{"line":18,"column":32},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/interaction/Extent.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/MapBrowserEventType.js"},{"name":"../coordinate.js","loc":{"line":19,"column":137},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/interaction/Extent.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/coordinate.js"},{"name":"../events/Event.js","loc":{"line":20,"column":18},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/interaction/Extent.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/events/Event.js"},{"name":"../extent.js","loc":{"line":21,"column":40},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/interaction/Extent.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/extent.js"},{"name":"../geom/GeometryType.js","loc":{"line":22,"column":25},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/interaction/Extent.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/geom/GeometryType.js"},{"name":"../geom/Point.js","loc":{"line":23,"column":18},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/interaction/Extent.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/geom/Point.js"},{"name":"../geom/Polygon.js","loc":{"line":24,"column":48},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/interaction/Extent.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/geom/Polygon.js"},{"name":"./Pointer.js","loc":{"line":25,"column":31},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/interaction/Extent.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/interaction/Pointer.js"},{"name":"../layer/Vector.js","loc":{"line":26,"column":24},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/interaction/Extent.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/layer/Vector.js"},{"name":"../source/Vector.js","loc":{"line":27,"column":25},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/interaction/Extent.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/source/Vector.js"},{"name":"../style/Style.js","loc":{"line":28,"column":35},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/interaction/Extent.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/style/Style.js"},{"name":"../proj.js","loc":{"line":29,"column":29},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/interaction/Extent.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/proj.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Feature = _interopRequireDefault(require(\"../Feature.js\"));\n\nvar _MapBrowserEventType = _interopRequireDefault(require(\"../MapBrowserEventType.js\"));\n\nvar _coordinate = require(\"../coordinate.js\");\n\nvar _Event = _interopRequireDefault(require(\"../events/Event.js\"));\n\nvar _extent = require(\"../extent.js\");\n\nvar _GeometryType = _interopRequireDefault(require(\"../geom/GeometryType.js\"));\n\nvar _Point = _interopRequireDefault(require(\"../geom/Point.js\"));\n\nvar _Polygon = require(\"../geom/Polygon.js\");\n\nvar _Pointer = _interopRequireDefault(require(\"./Pointer.js\"));\n\nvar _Vector = _interopRequireDefault(require(\"../layer/Vector.js\"));\n\nvar _Vector2 = _interopRequireDefault(require(\"../source/Vector.js\"));\n\nvar _Style = require(\"../style/Style.js\");\n\nvar _proj = require(\"../proj.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __extends = void 0 && (void 0).__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/Extent\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Initial extent. Defaults to no\n * initial extent.\n * @property {import(\"../style/Style.js\").StyleLike} [boxStyle]\n * Style for the drawn extent box. Defaults to\n * {@link module:ol/style/Style~createEditing()['Polygon']}\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [pointerStyle]\n * Style for the cursor used to draw the extent. Defaults to\n * {@link module:ol/style/Style~createEditing()['Point']}\n * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps\n * in the X direction? Only affects visuals, not functionality.\n */\n\n/**\n * @enum {string}\n */\nvar ExtentEventType = {\n  /**\n   * Triggered after the extent is changed\n   * @event ExtentEvent#extentchanged\n   * @api\n   */\n  EXTENTCHANGED: 'extentchanged'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Extent~Extent} instances are\n * instances of this type.\n */\n\nvar ExtentEvent =\n/** @class */\nfunction (_super) {\n  __extends(ExtentEvent, _super);\n  /**\n   * @param {import(\"../extent.js\").Extent} extent the new extent\n   */\n\n\n  function ExtentEvent(extent) {\n    var _this = _super.call(this, ExtentEventType.EXTENTCHANGED) || this;\n    /**\n     * The current extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n\n\n    _this.extent = extent;\n    return _this;\n  }\n\n  return ExtentEvent;\n}(_Event.default);\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map.\n * Once drawn, the vector box can be modified by dragging its vertices or edges.\n * This interaction is only supported for mouse devices.\n *\n * @fires ExtentEvent\n * @api\n */\n\n\nvar Extent =\n/** @class */\nfunction (_super) {\n  __extends(Extent, _super);\n  /**\n   * @param {Options=} opt_options Options.\n   */\n\n\n  function Extent(opt_options) {\n    var _this = this;\n\n    var options = opt_options || {};\n    _this = _super.call(this,\n    /** @type {import(\"./Pointer.js\").Options} */\n    options) || this;\n    /**\n     * Extent of the drawn box\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n\n    _this.extent_ = null;\n    /**\n     * Handler for pointer move events\n     * @type {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null}\n     * @private\n     */\n\n    _this.pointerHandler_ = null;\n    /**\n     * Pixel threshold to snap to extent\n     * @type {number}\n     * @private\n     */\n\n    _this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n    /**\n     * Is the pointer snapped to an extent vertex\n     * @type {boolean}\n     * @private\n     */\n\n    _this.snappedToVertex_ = false;\n    /**\n     * Feature for displaying the visible extent\n     * @type {Feature}\n     * @private\n     */\n\n    _this.extentFeature_ = null;\n    /**\n     * Feature for displaying the visible pointer\n     * @type {Feature<Point>}\n     * @private\n     */\n\n    _this.vertexFeature_ = null;\n\n    if (!opt_options) {\n      opt_options = {};\n    }\n    /**\n     * Layer for the extentFeature\n     * @type {VectorLayer}\n     * @private\n     */\n\n\n    _this.extentOverlay_ = new _Vector.default({\n      source: new _Vector2.default({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX\n      }),\n      style: opt_options.boxStyle ? opt_options.boxStyle : getDefaultExtentStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n    /**\n     * Layer for the vertexFeature\n     * @type {VectorLayer}\n     * @private\n     */\n\n    _this.vertexOverlay_ = new _Vector.default({\n      source: new _Vector2.default({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX\n      }),\n      style: opt_options.pointerStyle ? opt_options.pointerStyle : getDefaultPointerStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    if (opt_options.extent) {\n      _this.setExtent(opt_options.extent);\n    }\n\n    return _this;\n  }\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel cursor location\n   * @param {import(\"../PluggableMap.js\").default} map map\n   * @returns {import(\"../coordinate.js\").Coordinate|null} snapped vertex on extent\n   * @private\n   */\n\n\n  Extent.prototype.snapToVertex_ = function (pixel, map) {\n    var pixelCoordinate = map.getCoordinateFromPixelInternal(pixel);\n\n    var sortByDistance = function (a, b) {\n      return (0, _coordinate.squaredDistanceToSegment)(pixelCoordinate, a) - (0, _coordinate.squaredDistanceToSegment)(pixelCoordinate, b);\n    };\n\n    var extent = this.getExtentInternal();\n\n    if (extent) {\n      //convert extents to line segments and find the segment closest to pixelCoordinate\n      var segments = getSegments(extent);\n      segments.sort(sortByDistance);\n      var closestSegment = segments[0];\n      var vertex = (0, _coordinate.closestOnSegment)(pixelCoordinate, closestSegment);\n      var vertexPixel = map.getPixelFromCoordinateInternal(vertex); //if the distance is within tolerance, snap to the segment\n\n      if ((0, _coordinate.distance)(pixel, vertexPixel) <= this.pixelTolerance_) {\n        //test if we should further snap to a vertex\n        var pixel1 = map.getPixelFromCoordinateInternal(closestSegment[0]);\n        var pixel2 = map.getPixelFromCoordinateInternal(closestSegment[1]);\n        var squaredDist1 = (0, _coordinate.squaredDistance)(vertexPixel, pixel1);\n        var squaredDist2 = (0, _coordinate.squaredDistance)(vertexPixel, pixel2);\n        var dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n        this.snappedToVertex_ = dist <= this.pixelTolerance_;\n\n        if (this.snappedToVertex_) {\n          vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n        }\n\n        return vertex;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent pointer move event\n   * @private\n   */\n\n\n  Extent.prototype.handlePointerMove_ = function (mapBrowserEvent) {\n    var pixel = mapBrowserEvent.pixel;\n    var map = mapBrowserEvent.map;\n    var vertex = this.snapToVertex_(pixel, map);\n\n    if (!vertex) {\n      vertex = map.getCoordinateFromPixelInternal(pixel);\n    }\n\n    this.createOrUpdatePointerFeature_(vertex);\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent extent\n   * @returns {Feature} extent as featrue\n   * @private\n   */\n\n\n  Extent.prototype.createOrUpdateExtentFeature_ = function (extent) {\n    var extentFeature = this.extentFeature_;\n\n    if (!extentFeature) {\n      if (!extent) {\n        extentFeature = new _Feature.default({});\n      } else {\n        extentFeature = new _Feature.default((0, _Polygon.fromExtent)(extent));\n      }\n\n      this.extentFeature_ = extentFeature;\n      this.extentOverlay_.getSource().addFeature(extentFeature);\n    } else {\n      if (!extent) {\n        extentFeature.setGeometry(undefined);\n      } else {\n        extentFeature.setGeometry((0, _Polygon.fromExtent)(extent));\n      }\n    }\n\n    return extentFeature;\n  };\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} vertex location of feature\n   * @returns {Feature} vertex as feature\n   * @private\n   */\n\n\n  Extent.prototype.createOrUpdatePointerFeature_ = function (vertex) {\n    var vertexFeature = this.vertexFeature_;\n\n    if (!vertexFeature) {\n      vertexFeature = new _Feature.default(new _Point.default(vertex));\n      this.vertexFeature_ = vertexFeature;\n      this.vertexOverlay_.getSource().addFeature(vertexFeature);\n    } else {\n      var geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(vertex);\n    }\n\n    return vertexFeature;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Extent.prototype.handleEvent = function (mapBrowserEvent) {\n    if (!\n    /** @type {import(\"../MapBrowserPointerEvent.js\").default} */\n    mapBrowserEvent.pointerEvent) {\n      return true;\n    } //display pointer (if not dragging)\n\n\n    if (mapBrowserEvent.type == _MapBrowserEventType.default.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    } //call pointer to determine up/down/drag\n\n\n    _super.prototype.handleEvent.call(this, mapBrowserEvent); //return false to stop propagation\n\n\n    return false;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Extent.prototype.handleDownEvent = function (mapBrowserEvent) {\n    var pixel = mapBrowserEvent.pixel;\n    var map = mapBrowserEvent.map;\n    var extent = this.getExtentInternal();\n    var vertex = this.snapToVertex_(pixel, map); //find the extent corner opposite the passed corner\n\n    var getOpposingPoint = function (point) {\n      var x_ = null;\n      var y_ = null;\n\n      if (point[0] == extent[0]) {\n        x_ = extent[2];\n      } else if (point[0] == extent[2]) {\n        x_ = extent[0];\n      }\n\n      if (point[1] == extent[1]) {\n        y_ = extent[3];\n      } else if (point[1] == extent[3]) {\n        y_ = extent[1];\n      }\n\n      if (x_ !== null && y_ !== null) {\n        return [x_, y_];\n      }\n\n      return null;\n    };\n\n    if (vertex && extent) {\n      var x = vertex[0] == extent[0] || vertex[0] == extent[2] ? vertex[0] : null;\n      var y = vertex[1] == extent[1] || vertex[1] == extent[3] ? vertex[1] : null; //snap to point\n\n      if (x !== null && y !== null) {\n        this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex)); //snap to edge\n      } else if (x !== null) {\n        this.pointerHandler_ = getEdgeHandler(getOpposingPoint([x, extent[1]]), getOpposingPoint([x, extent[3]]));\n      } else if (y !== null) {\n        this.pointerHandler_ = getEdgeHandler(getOpposingPoint([extent[0], y]), getOpposingPoint([extent[2], y]));\n      } //no snap - new bbox\n\n    } else {\n      vertex = map.getCoordinateFromPixelInternal(pixel);\n      this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);\n      this.pointerHandler_ = getPointHandler(vertex);\n    }\n\n    return true; //event handled; start downup sequence\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Extent.prototype.handleDragEvent = function (mapBrowserEvent) {\n    if (this.pointerHandler_) {\n      var pixelCoordinate = mapBrowserEvent.coordinate;\n      this.setExtent(this.pointerHandler_(pixelCoordinate));\n      this.createOrUpdatePointerFeature_(pixelCoordinate);\n    }\n\n    return true;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Extent.prototype.handleUpEvent = function (mapBrowserEvent) {\n    this.pointerHandler_ = null; //If bbox is zero area, set to null;\n\n    var extent = this.getExtentInternal();\n\n    if (!extent || (0, _extent.getArea)(extent) === 0) {\n      this.setExtent(null);\n    }\n\n    return false; //Stop handling downup sequence\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Extent.prototype.setMap = function (map) {\n    this.extentOverlay_.setMap(map);\n    this.vertexOverlay_.setMap(map);\n\n    _super.prototype.setMap.call(this, map);\n  };\n  /**\n   * Returns the current drawn extent in the view projection (or user projection if set)\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n\n\n  Extent.prototype.getExtent = function () {\n    return (0, _proj.toUserExtent)(this.getExtentInternal(), this.getMap().getView().getProjection());\n  };\n  /**\n   * Returns the current drawn extent in the view projection\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n\n\n  Extent.prototype.getExtentInternal = function () {\n    return this.extent_;\n  };\n  /**\n   * Manually sets the drawn extent, using the view projection.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent\n   * @api\n   */\n\n\n  Extent.prototype.setExtent = function (extent) {\n    //Null extent means no bbox\n    this.extent_ = extent ? extent : null;\n    this.createOrUpdateExtentFeature_(extent);\n    this.dispatchEvent(new ExtentEvent(this.extent_));\n  };\n\n  return Extent;\n}(_Pointer.default);\n/**\n * Returns the default style for the drawn bbox\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default Extent style\n */\n\n\nfunction getDefaultExtentStyleFunction() {\n  var style = (0, _Style.createEditingStyle)();\n  return function (feature, resolution) {\n    return style[_GeometryType.default.POLYGON];\n  };\n}\n/**\n * Returns the default style for the pointer\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default pointer style\n */\n\n\nfunction getDefaultPointerStyleFunction() {\n  var style = (0, _Style.createEditingStyle)();\n  return function (feature, resolution) {\n    return style[_GeometryType.default.POINT];\n  };\n}\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedPoint corner that will be unchanged in the new extent\n * @returns {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent} event handler\n */\n\n\nfunction getPointHandler(fixedPoint) {\n  return function (point) {\n    return (0, _extent.boundingExtent)([fixedPoint, point]);\n  };\n}\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedP1 first corner that will be unchanged in the new extent\n * @param {import(\"../coordinate.js\").Coordinate} fixedP2 second corner that will be unchanged in the new extent\n * @returns {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null} event handler\n */\n\n\nfunction getEdgeHandler(fixedP1, fixedP2) {\n  if (fixedP1[0] == fixedP2[0]) {\n    return function (point) {\n      return (0, _extent.boundingExtent)([fixedP1, [point[0], fixedP2[1]]]);\n    };\n  } else if (fixedP1[1] == fixedP2[1]) {\n    return function (point) {\n      return (0, _extent.boundingExtent)([fixedP1, [fixedP2[0], point[1]]]);\n    };\n  } else {\n    return null;\n  }\n}\n/**\n * @param {import(\"../extent.js\").Extent} extent extent\n * @returns {Array<Array<import(\"../coordinate.js\").Coordinate>>} extent line segments\n */\n\n\nfunction getSegments(extent) {\n  return [[[extent[0], extent[1]], [extent[0], extent[3]]], [[extent[0], extent[3]], [extent[2], extent[3]]], [[extent[2], extent[3]], [extent[2], extent[1]]], [[extent[2], extent[1]], [extent[0], extent[1]]]];\n}\n\nvar _default = Extent;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"21314d7d0dc55bffa3ce29ade6e149c6","cacheData":{"env":{}}}