{"id":"../node_modules/ol/format/GeoJSON.js","dependencies":[{"name":"/Users/hk/Sites/digital-forest-monitoring/package.json","includedInParent":true,"mtime":1574333047455},{"name":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/package.json","includedInParent":true,"mtime":1573122283680},{"name":"../asserts.js","loc":{"line":17,"column":23},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/format/GeoJSON.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/asserts.js"},{"name":"../Feature.js","loc":{"line":18,"column":20},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/format/GeoJSON.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/Feature.js"},{"name":"./Feature.js","loc":{"line":19,"column":45},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/format/GeoJSON.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/format/Feature.js"},{"name":"./JSONFeature.js","loc":{"line":20,"column":24},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/format/GeoJSON.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/format/JSONFeature.js"},{"name":"../geom/GeometryCollection.js","loc":{"line":21,"column":31},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/format/GeoJSON.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/geom/GeometryCollection.js"},{"name":"../geom/LineString.js","loc":{"line":22,"column":23},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/format/GeoJSON.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/geom/LineString.js"},{"name":"../geom/MultiLineString.js","loc":{"line":23,"column":28},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/format/GeoJSON.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/geom/MultiLineString.js"},{"name":"../geom/MultiPoint.js","loc":{"line":24,"column":23},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/format/GeoJSON.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/geom/MultiPoint.js"},{"name":"../geom/MultiPolygon.js","loc":{"line":25,"column":25},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/format/GeoJSON.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/geom/MultiPolygon.js"},{"name":"../geom/Point.js","loc":{"line":26,"column":18},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/format/GeoJSON.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/geom/Point.js"},{"name":"../geom/Polygon.js","loc":{"line":27,"column":20},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/format/GeoJSON.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/geom/Polygon.js"},{"name":"../obj.js","loc":{"line":28,"column":32},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/format/GeoJSON.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/obj.js"},{"name":"../proj.js","loc":{"line":29,"column":37},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/format/GeoJSON.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/proj.js"},{"name":"../geom/GeometryType.js","loc":{"line":30,"column":25},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/format/GeoJSON.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/geom/GeometryType.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _asserts = require(\"../asserts.js\");\n\nvar _Feature = _interopRequireDefault(require(\"../Feature.js\"));\n\nvar _Feature2 = require(\"./Feature.js\");\n\nvar _JSONFeature = _interopRequireDefault(require(\"./JSONFeature.js\"));\n\nvar _GeometryCollection = _interopRequireDefault(require(\"../geom/GeometryCollection.js\"));\n\nvar _LineString = _interopRequireDefault(require(\"../geom/LineString.js\"));\n\nvar _MultiLineString = _interopRequireDefault(require(\"../geom/MultiLineString.js\"));\n\nvar _MultiPoint = _interopRequireDefault(require(\"../geom/MultiPoint.js\"));\n\nvar _MultiPolygon = _interopRequireDefault(require(\"../geom/MultiPolygon.js\"));\n\nvar _Point = _interopRequireDefault(require(\"../geom/Point.js\"));\n\nvar _Polygon = _interopRequireDefault(require(\"../geom/Polygon.js\"));\n\nvar _obj = require(\"../obj.js\");\n\nvar _proj = require(\"../proj.js\");\n\nvar _GeometryType = _interopRequireDefault(require(\"../geom/GeometryType.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @module ol/format/GeoJSON\n */\nvar __extends = void 0 && (void 0).__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n  * @api\n */\nvar GeoJSON =\n/** @class */\nfunction (_super) {\n  __extends(GeoJSON, _super);\n  /**\n   * @param {Options=} opt_options Options.\n   */\n\n\n  function GeoJSON(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this) || this;\n    /**\n     * @inheritDoc\n     */\n\n    _this.dataProjection = (0, _proj.get)(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n\n    if (options.featureProjection) {\n      _this.defaultFeatureProjection = (0, _proj.get)(options.featureProjection);\n    }\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n\n\n    _this.geometryName_ = options.geometryName;\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n\n    _this.extractGeometryName_ = options.extractGeometryName;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  GeoJSON.prototype.readFeatureFromObject = function (object, opt_options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    var geoJSONFeature = null;\n\n    if (object['type'] === 'Feature') {\n      geoJSONFeature =\n      /** @type {GeoJSONFeature} */\n      object;\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry':\n        /** @type {GeoJSONGeometry} */\n        object,\n        'properties': null\n      };\n    }\n\n    var geometry = readGeometry(geoJSONFeature['geometry'], opt_options);\n    var feature = new _Feature.default();\n\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (this.extractGeometryName_ && 'geometry_name' in geoJSONFeature !== undefined) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n\n    feature.setGeometry(geometry);\n\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties'], true);\n    }\n\n    return feature;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  GeoJSON.prototype.readFeaturesFromObject = function (object, opt_options) {\n    var geoJSONObject =\n    /** @type {GeoJSONObject} */\n    object;\n    /** @type {Array<import(\"../Feature.js\").default>} */\n\n    var features = null;\n\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      var geoJSONFeatureCollection =\n      /** @type {GeoJSONFeatureCollection} */\n      object;\n      features = [];\n      var geoJSONFeatures = geoJSONFeatureCollection['features'];\n\n      for (var i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, opt_options)];\n    }\n\n    return features;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  GeoJSON.prototype.readGeometryFromObject = function (object, opt_options) {\n    return readGeometry(\n    /** @type {GeoJSONGeometry} */\n    object, opt_options);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  GeoJSON.prototype.readProjectionFromObject = function (object) {\n    var crs = object['crs'];\n    var projection;\n\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = (0, _proj.get)(crs['properties']['name']);\n      } else {\n        (0, _asserts.assert)(false, 36); // Unknown SRS type\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n\n    return (\n      /** @type {import(\"../proj/Projection.js\").default} */\n      projection\n    );\n  };\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONFeature} Object.\n   * @override\n   * @api\n   */\n\n\n  GeoJSON.prototype.writeFeatureObject = function (feature, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    /** @type {GeoJSONFeature} */\n\n    var object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null\n    };\n    var id = feature.getId();\n\n    if (id !== undefined) {\n      object.id = id;\n    }\n\n    var geometry = feature.getGeometry();\n\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, opt_options);\n    }\n\n    var properties = feature.getProperties();\n    delete properties[feature.getGeometryName()];\n\n    if (!(0, _obj.isEmpty)(properties)) {\n      object.properties = properties;\n    }\n\n    return object;\n  };\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @override\n   * @api\n   */\n\n\n  GeoJSON.prototype.writeFeaturesObject = function (features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var objects = [];\n\n    for (var i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], opt_options));\n    }\n\n    return {\n      type: 'FeatureCollection',\n      features: objects\n    };\n  };\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @override\n   * @api\n   */\n\n\n  GeoJSON.prototype.writeGeometryObject = function (geometry, opt_options) {\n    return writeGeometry(geometry, this.adaptOptions(opt_options));\n  };\n\n  return GeoJSON;\n}(_JSONFeature.default);\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\n\n\nfunction readGeometry(object, opt_options) {\n  if (!object) {\n    return null;\n  }\n  /**\n   * @type {import(\"../geom/Geometry.js\").default}\n   */\n\n\n  var geometry;\n\n  switch (object['type']) {\n    case _GeometryType.default.POINT:\n      {\n        geometry = readPointGeometry(\n        /** @type {GeoJSONPoint} */\n        object);\n        break;\n      }\n\n    case _GeometryType.default.LINE_STRING:\n      {\n        geometry = readLineStringGeometry(\n        /** @type {GeoJSONLineString} */\n        object);\n        break;\n      }\n\n    case _GeometryType.default.POLYGON:\n      {\n        geometry = readPolygonGeometry(\n        /** @type {GeoJSONPolygon} */\n        object);\n        break;\n      }\n\n    case _GeometryType.default.MULTI_POINT:\n      {\n        geometry = readMultiPointGeometry(\n        /** @type {GeoJSONMultiPoint} */\n        object);\n        break;\n      }\n\n    case _GeometryType.default.MULTI_LINE_STRING:\n      {\n        geometry = readMultiLineStringGeometry(\n        /** @type {GeoJSONMultiLineString} */\n        object);\n        break;\n      }\n\n    case _GeometryType.default.MULTI_POLYGON:\n      {\n        geometry = readMultiPolygonGeometry(\n        /** @type {GeoJSONMultiPolygon} */\n        object);\n        break;\n      }\n\n    case _GeometryType.default.GEOMETRY_COLLECTION:\n      {\n        geometry = readGeometryCollectionGeometry(\n        /** @type {GeoJSONGeometryCollection} */\n        object);\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported GeoJSON type: ' + object.type);\n      }\n  }\n\n  return (0, _Feature2.transformGeometryWithOptions)(geometry, false, opt_options);\n}\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n * @return {GeometryCollection} Geometry collection.\n */\n\n\nfunction readGeometryCollectionGeometry(object, opt_options) {\n  var geometries = object['geometries'].map(\n  /**\n   * @param {GeoJSONGeometry} geometry Geometry.\n   * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   */\n  function (geometry) {\n    return readGeometry(geometry, opt_options);\n  });\n  return new _GeometryCollection.default(geometries);\n}\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\n\n\nfunction readPointGeometry(object) {\n  return new _Point.default(object['coordinates']);\n}\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\n\n\nfunction readLineStringGeometry(object) {\n  return new _LineString.default(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\n\n\nfunction readMultiLineStringGeometry(object) {\n  return new _MultiLineString.default(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\n\n\nfunction readMultiPointGeometry(object) {\n  return new _MultiPoint.default(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\n\n\nfunction readMultiPolygonGeometry(object) {\n  return new _MultiPolygon.default(object['coordinates']);\n}\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\n\n\nfunction readPolygonGeometry(object) {\n  return new _Polygon.default(object['coordinates']);\n}\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeGeometry(geometry, opt_options) {\n  geometry = (0, _Feature2.transformGeometryWithOptions)(geometry, true, opt_options);\n  var type = geometry.getType();\n  /** @type {GeoJSONGeometry} */\n\n  var geoJSON;\n\n  switch (type) {\n    case _GeometryType.default.POINT:\n      {\n        geoJSON = writePointGeometry(\n        /** @type {Point} */\n        geometry, opt_options);\n        break;\n      }\n\n    case _GeometryType.default.LINE_STRING:\n      {\n        geoJSON = writeLineStringGeometry(\n        /** @type {LineString} */\n        geometry, opt_options);\n        break;\n      }\n\n    case _GeometryType.default.POLYGON:\n      {\n        geoJSON = writePolygonGeometry(\n        /** @type {Polygon} */\n        geometry, opt_options);\n        break;\n      }\n\n    case _GeometryType.default.MULTI_POINT:\n      {\n        geoJSON = writeMultiPointGeometry(\n        /** @type {MultiPoint} */\n        geometry, opt_options);\n        break;\n      }\n\n    case _GeometryType.default.MULTI_LINE_STRING:\n      {\n        geoJSON = writeMultiLineStringGeometry(\n        /** @type {MultiLineString} */\n        geometry, opt_options);\n        break;\n      }\n\n    case _GeometryType.default.MULTI_POLYGON:\n      {\n        geoJSON = writeMultiPolygonGeometry(\n        /** @type {MultiPolygon} */\n        geometry, opt_options);\n        break;\n      }\n\n    case _GeometryType.default.GEOMETRY_COLLECTION:\n      {\n        geoJSON = writeGeometryCollectionGeometry(\n        /** @type {GeometryCollection} */\n        geometry, opt_options);\n        break;\n      }\n\n    case _GeometryType.default.CIRCLE:\n      {\n        geoJSON = {\n          type: 'GeometryCollection',\n          geometries: []\n        };\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n\n  return geoJSON;\n}\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\n\n\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n  var geometries = geometry.getGeometriesArray().map(function (geometry) {\n    var options = (0, _obj.assign)({}, opt_options);\n    delete options.featureProjection;\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries\n  };\n}\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiPointGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  var right;\n\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writePointGeometry(geometry, opt_options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writePolygonGeometry(geometry, opt_options) {\n  var right;\n\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n\nvar _default = GeoJSON;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"50dec89575390d500ddf0f9b2d68ad2c","cacheData":{"env":{}}}