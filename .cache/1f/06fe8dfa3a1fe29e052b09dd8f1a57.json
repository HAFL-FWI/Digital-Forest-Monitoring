{"id":"../node_modules/ol/source/ImageMapGuide.js","dependencies":[{"name":"/Users/hk/Sites/digital-forest-monitoring/package.json","includedInParent":true,"mtime":1574333047455},{"name":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/package.json","includedInParent":true,"mtime":1573122283680},{"name":"../Image.js","loc":{"line":17,"column":25},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/source/ImageMapGuide.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/Image.js"},{"name":"../events/EventType.js","loc":{"line":18,"column":22},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/source/ImageMapGuide.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/events/EventType.js"},{"name":"../extent.js","loc":{"line":19,"column":80},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/source/ImageMapGuide.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/extent.js"},{"name":"../obj.js","loc":{"line":20,"column":23},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/source/ImageMapGuide.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/obj.js"},{"name":"./Image.js","loc":{"line":21,"column":54},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/source/ImageMapGuide.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/source/Image.js"},{"name":"../uri.js","loc":{"line":22,"column":29},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/source/ImageMapGuide.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/uri.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Image = _interopRequireDefault(require(\"../Image.js\"));\n\nvar _EventType = _interopRequireDefault(require(\"../events/EventType.js\"));\n\nvar _extent = require(\"../extent.js\");\n\nvar _obj = require(\"../obj.js\");\n\nvar _Image2 = _interopRequireWildcard(require(\"./Image.js\"));\n\nvar _uri = require(\"../uri.js\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @module ol/source/ImageMapGuide\n */\nvar __extends = void 0 && (void 0).__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {Object} [params] Additional parameters.\n */\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nvar ImageMapGuide =\n/** @class */\nfunction (_super) {\n  __extends(ImageMapGuide, _super);\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n\n\n  function ImageMapGuide(options) {\n    var _this = _super.call(this, {\n      projection: options.projection,\n      resolutions: options.resolutions\n    }) || this;\n    /**\n     * @private\n     * @type {?string}\n     */\n\n\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.displayDpi_ = options.displayDpi !== undefined ? options.displayDpi : 96;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    _this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    _this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n\n    _this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : _Image2.defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.metersPerUnit_ = options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.useOverlay_ = options.useOverlay !== undefined ? options.useOverlay : false;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n\n    _this.image_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.renderedRevision_ = 0;\n    return _this;\n  }\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  ImageMapGuide.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ImageMapGuide.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n    var image = this.image_;\n\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && (0, _extent.containsExtent)(image.getExtent(), extent)) {\n      return image;\n    }\n\n    if (this.ratio_ != 1) {\n      extent = extent.slice();\n      (0, _extent.scaleFromCenter)(extent, this.ratio_);\n    }\n\n    var width = (0, _extent.getWidth)(extent) / resolution;\n    var height = (0, _extent.getHeight)(extent) / resolution;\n    var size = [width * pixelRatio, height * pixelRatio];\n\n    if (this.url_ !== undefined) {\n      var imageUrl = this.getUrl(this.url_, this.params_, extent, size, projection);\n      image = new _Image.default(extent, resolution, pixelRatio, imageUrl, this.crossOrigin_, this.imageLoadFunction_);\n      image.addEventListener(_EventType.default.CHANGE, this.handleImageChange.bind(this));\n    } else {\n      image = null;\n    }\n\n    this.image_ = image;\n    this.renderedRevision_ = this.getRevision();\n    return image;\n  };\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n\n\n  ImageMapGuide.prototype.getImageLoadFunction = function () {\n    return this.imageLoadFunction_;\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  ImageMapGuide.prototype.updateParams = function (params) {\n    (0, _obj.assign)(this.params_, params);\n    this.changed();\n  };\n  /**\n   * @param {string} baseUrl The mapagent url.\n   * @param {Object<string, string|number>} params Request parameters.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string} The mapagent map image request URL.\n   */\n\n\n  ImageMapGuide.prototype.getUrl = function (baseUrl, params, extent, size, projection) {\n    var scale = getScale(extent, size, this.metersPerUnit_, this.displayDpi_);\n    var center = (0, _extent.getCenter)(extent);\n    var baseParams = {\n      'OPERATION': this.useOverlay_ ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',\n      'VERSION': '2.0.0',\n      'LOCALE': 'en',\n      'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n      'CLIP': '1',\n      'SETDISPLAYDPI': this.displayDpi_,\n      'SETDISPLAYWIDTH': Math.round(size[0]),\n      'SETDISPLAYHEIGHT': Math.round(size[1]),\n      'SETVIEWSCALE': scale,\n      'SETVIEWCENTERX': center[0],\n      'SETVIEWCENTERY': center[1]\n    };\n    (0, _obj.assign)(baseParams, params);\n    return (0, _uri.appendParams)(baseUrl, baseParams);\n  };\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n\n\n  ImageMapGuide.prototype.setImageLoadFunction = function (imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  };\n\n  return ImageMapGuide;\n}(_Image2.default);\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\n\n\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  var mcsW = (0, _extent.getWidth)(extent);\n  var mcsH = (0, _extent.getHeight)(extent);\n  var devW = size[0];\n  var devH = size[1];\n  var mpp = 0.0254 / dpi;\n\n  if (devH * mcsW > devW * mcsH) {\n    return mcsW * metersPerUnit / (devW * mpp); // width limited\n  } else {\n    return mcsH * metersPerUnit / (devH * mpp); // height limited\n  }\n}\n\nvar _default = ImageMapGuide;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"8c2f2b14ff5556b5b6d01d572e1de668","cacheData":{"env":{}}}