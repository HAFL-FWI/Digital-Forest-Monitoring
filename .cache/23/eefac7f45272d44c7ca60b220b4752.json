{"id":"../node_modules/ol/css.js","dependencies":[{"name":"/Users/hk/Sites/digital-forest-monitoring/package.json","includedInParent":true,"mtime":1574333047455},{"name":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/package.json","includedInParent":true,"mtime":1573122283680}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFontParameters = exports.CLASS_COLLAPSED = exports.CLASS_CONTROL = exports.CLASS_UNSUPPORTED = exports.CLASS_UNSELECTABLE = exports.CLASS_SELECTABLE = exports.CLASS_HIDDEN = void 0;\n\n/**\n * @module ol/css\n */\n\n/**\n * @typedef {Object} FontParameters\n * @property {Array<string>} families\n * @property {string} style\n * @property {string} weight\n */\n\n/**\n * The CSS class for hidden feature.\n *\n * @const\n * @type {string}\n */\nvar CLASS_HIDDEN = 'ol-hidden';\n/**\n * The CSS class that we'll give the DOM elements to have them selectable.\n *\n * @const\n * @type {string}\n */\n\nexports.CLASS_HIDDEN = CLASS_HIDDEN;\nvar CLASS_SELECTABLE = 'ol-selectable';\n/**\n * The CSS class that we'll give the DOM elements to have them unselectable.\n *\n * @const\n * @type {string}\n */\n\nexports.CLASS_SELECTABLE = CLASS_SELECTABLE;\nvar CLASS_UNSELECTABLE = 'ol-unselectable';\n/**\n * The CSS class for unsupported feature.\n *\n * @const\n * @type {string}\n */\n\nexports.CLASS_UNSELECTABLE = CLASS_UNSELECTABLE;\nvar CLASS_UNSUPPORTED = 'ol-unsupported';\n/**\n * The CSS class for controls.\n *\n * @const\n * @type {string}\n */\n\nexports.CLASS_UNSUPPORTED = CLASS_UNSUPPORTED;\nvar CLASS_CONTROL = 'ol-control';\n/**\n * The CSS class that we'll give the DOM elements that are collapsed, i.e.\n * to those elements which usually can be expanded.\n *\n * @const\n * @type {string}\n */\n\nexports.CLASS_CONTROL = CLASS_CONTROL;\nvar CLASS_COLLAPSED = 'ol-collapsed';\n/**\n * Get the list of font families from a font spec.  Note that this doesn't work\n * for font families that have commas in them.\n * @param {string} The CSS font property.\n * @return {FontParameters} The font families (or null if the input spec is invalid).\n */\n\nexports.CLASS_COLLAPSED = CLASS_COLLAPSED;\n\nvar getFontParameters = function () {\n  /**\n   * @type {CSSStyleDeclaration}\n   */\n  var style;\n  /**\n   * @type {Object<string, FontParameters>}\n   */\n\n  var cache = {};\n  return function (font) {\n    if (!style) {\n      style = document.createElement('div').style;\n    }\n\n    if (!(font in cache)) {\n      style.font = font;\n      var family = style.fontFamily;\n      var fontWeight = style.fontWeight;\n      var fontStyle = style.fontStyle;\n      style.font = '';\n\n      if (!family) {\n        return null;\n      }\n\n      var families = family.split(/,\\s?/);\n      cache[font] = {\n        families: families,\n        weight: fontWeight,\n        style: fontStyle\n      };\n    }\n\n    return cache[font];\n  };\n}();\n\nexports.getFontParameters = getFontParameters;"},"sourceMaps":null,"error":null,"hash":"6eea833f19ea93f2412ec7b0c5712f84","cacheData":{"env":{}}}