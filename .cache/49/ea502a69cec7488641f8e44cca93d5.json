{"id":"utils/BasemapControl.js","dependencies":[{"name":"/Users/hk/Sites/digital-forest-monitoring/package.json","includedInParent":true,"mtime":1574333047455},{"name":"ol/control","loc":{"line":1,"column":24},"parent":"/Users/hk/Sites/digital-forest-monitoring/src/utils/BasemapControl.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/control.js"},{"name":"../img/basemapOrtho.jpg","loc":{"line":2,"column":23},"parent":"/Users/hk/Sites/digital-forest-monitoring/src/utils/BasemapControl.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/src/img/basemapOrtho.jpg"},{"name":"../img/sw.jpg","loc":{"line":3,"column":15},"parent":"/Users/hk/Sites/digital-forest-monitoring/src/utils/BasemapControl.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/src/img/sw.jpg"},{"name":"./basemap_util","loc":{"line":4,"column":40},"parent":"/Users/hk/Sites/digital-forest-monitoring/src/utils/BasemapControl.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/src/utils/basemap_util.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _control = require(\"ol/control\");\n\nvar _basemapOrtho = _interopRequireDefault(require(\"../img/basemapOrtho.jpg\"));\n\nvar _sw = _interopRequireDefault(require(\"../img/sw.jpg\"));\n\nvar _basemap_util = require(\"./basemap_util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar BasemapControl =\n/*#__PURE__*/\nfunction () {\n  function BasemapControl() {\n    var map = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var active = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Orthofoto\";\n\n    _classCallCheck(this, BasemapControl);\n\n    this.map = map;\n    this.active = active;\n    this.basemaps = [{\n      name: \"Orthofoto\",\n      visible: true,\n      image: _basemapOrtho.default,\n      layer: _basemap_util.orthoBasemap\n    }, {\n      name: \"Karte SW\",\n      visible: false,\n      image: _sw.default,\n      layer: _basemap_util.swBasemap\n    }];\n  }\n\n  _createClass(BasemapControl, [{\n    key: \"createBasemapControl\",\n    value: function createBasemapControl() {\n      var _this$getBasemapState = this.getBasemapState(this.active),\n          _this$getBasemapState2 = _slicedToArray(_this$getBasemapState, 2),\n          activeBasemap = _this$getBasemapState2[0],\n          iconBasemap = _this$getBasemapState2[1]; //show the currently active basemap\n\n\n      activeBasemap.layer.setVisible(true);\n      var basemapFragment = new DocumentFragment();\n      this.basemapControl = document.createElement(\"div\");\n      this.basemapControl.appendChild(this.createBasemap(iconBasemap));\n      basemapFragment.appendChild(this.basemapControl);\n      this.basemapControl.className = \"basemapControl\";\n      var basemapSwitch = new _control.Control({\n        element: basemapFragment\n      });\n      return basemapSwitch;\n    }\n    /*\n     * creates a clickable basemap item\n     * @param {object} basemapObject -  with important properties like name,image,visible ...\n     * @returns {domElement} besemap - a clickable basemap div.\n     */\n\n  }, {\n    key: \"createBasemap\",\n    value: function createBasemap(basemapObject) {\n      var _this = this;\n\n      var basemap = document.createElement(\"div\");\n      basemap.title = basemapObject.visible ? \"Verf√ºgbare Hintergrundkarten anzeigen\" : \"Hintergrundkarte wechseln\";\n      basemap.classList.add(\"basemap\");\n      basemap.style.backgroundImage = \"url(\".concat(basemapObject.image, \")\");\n      var basemapTitle = document.createElement(\"div\");\n      basemapTitle.classList.add(\"basemapControl__title\");\n      basemapTitle.innerHTML = basemapObject.name;\n      basemap.appendChild(basemapTitle);\n      basemap.addEventListener(\"click\", function (e) {\n        e.preventDefault();\n\n        _this.basemapControl.classList.remove(\"animate\");\n        /* triggering a reflow after the removing of the animate class,\n         * will make the animation work withou a setTimeout().\n         */\n\n\n        void _this.basemapControl.offsetWidth;\n\n        _this.basemapControl.classList.add(\"animate\");\n\n        var _this$getBasemapState3 = _this.getBasemapState(basemapObject.name),\n            _this$getBasemapState4 = _slicedToArray(_this$getBasemapState3, 2),\n            newBasemap = _this$getBasemapState4[0],\n            iconBasemap = _this$getBasemapState4[1];\n\n        _this.basemapControl.firstChild.remove();\n\n        _this.basemapControl.appendChild(_this.createBasemap(iconBasemap));\n\n        iconBasemap.layer.setVisible(false);\n        newBasemap.layer.setVisible(true);\n      }, false);\n      return basemap;\n    }\n    /*\n     * gets the basemap object to display on the map and the one to display in the switch\n     * @param {string} basemapName - the name of the clicked basemap, e.g. the new basemap to display\n     * @returns {array} - the new basemap to display and the one to show in the basemap toggle.\n     */\n\n  }, {\n    key: \"getBasemapState\",\n    value: function getBasemapState(basemapName) {\n      var newBasemap = this.basemaps.filter(function (item) {\n        return item.name === basemapName;\n      })[0];\n      var iconBasemap = this.basemaps.filter(function (item) {\n        return item.name !== basemapName;\n      })[0];\n      return [newBasemap, iconBasemap];\n    }\n  }]);\n\n  return BasemapControl;\n}();\n\nvar _default = BasemapControl;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"fdc322280a0c814746a644c4bd5b4068","cacheData":{"env":{}}}