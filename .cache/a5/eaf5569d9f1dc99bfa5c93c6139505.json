{"id":"../node_modules/@material/textfield/component.js","dependencies":[{"name":"/Users/hk/Sites/digital-forest-monitoring/package.json","includedInParent":true,"mtime":1574333047455},{"name":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/package.json","includedInParent":true,"mtime":1574003374154},{"name":"tslib","loc":{"line":23,"column":25},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/tslib/tslib.es6.js"},{"name":"@material/base/component","loc":{"line":24,"column":29},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/base/component.js"},{"name":"@material/dom/events","loc":{"line":25,"column":29},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/dom/events.js"},{"name":"@material/dom/ponyfill","loc":{"line":26,"column":26},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/dom/ponyfill.js"},{"name":"@material/floating-label/component","loc":{"line":27,"column":33},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/floating-label/component.js"},{"name":"@material/line-ripple/component","loc":{"line":28,"column":30},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/line-ripple/component.js"},{"name":"@material/notched-outline/component","loc":{"line":29,"column":34},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/notched-outline/component.js"},{"name":"@material/ripple/component","loc":{"line":30,"column":26},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/ripple/component.js"},{"name":"@material/ripple/foundation","loc":{"line":31,"column":36},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/ripple/foundation.js"},{"name":"./character-counter/component","loc":{"line":32,"column":46},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/character-counter/component.js"},{"name":"./character-counter/foundation","loc":{"line":33,"column":55},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/character-counter/foundation.js"},{"name":"./constants","loc":{"line":34,"column":36},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/constants.js"},{"name":"./foundation","loc":{"line":35,"column":39},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/foundation.js"},{"name":"./helper-text/component","loc":{"line":36,"column":40},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/helper-text/component.js"},{"name":"./helper-text/foundation","loc":{"line":37,"column":49},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/helper-text/foundation.js"},{"name":"./icon/component","loc":{"line":38,"column":33},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/icon/component.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MDCTextField = void 0;\n\nvar tslib_1 = _interopRequireWildcard(require(\"tslib\"));\n\nvar _component = require(\"@material/base/component\");\n\nvar _events = require(\"@material/dom/events\");\n\nvar ponyfill = _interopRequireWildcard(require(\"@material/dom/ponyfill\"));\n\nvar _component2 = require(\"@material/floating-label/component\");\n\nvar _component3 = require(\"@material/line-ripple/component\");\n\nvar _component4 = require(\"@material/notched-outline/component\");\n\nvar _component5 = require(\"@material/ripple/component\");\n\nvar _foundation = require(\"@material/ripple/foundation\");\n\nvar _component6 = require(\"./character-counter/component\");\n\nvar _foundation2 = require(\"./character-counter/foundation\");\n\nvar _constants = require(\"./constants\");\n\nvar _foundation3 = require(\"./foundation\");\n\nvar _component7 = require(\"./helper-text/component\");\n\nvar _foundation4 = require(\"./helper-text/foundation\");\n\nvar _component8 = require(\"./icon/component\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar MDCTextField =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCTextField, _super);\n\n  function MDCTextField() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCTextField.attachTo = function (root) {\n    return new MDCTextField(root);\n  };\n\n  MDCTextField.prototype.initialize = function (rippleFactory, lineRippleFactory, helperTextFactory, characterCounterFactory, iconFactory, labelFactory, outlineFactory) {\n    if (rippleFactory === void 0) {\n      rippleFactory = function (el, foundation) {\n        return new _component5.MDCRipple(el, foundation);\n      };\n    }\n\n    if (lineRippleFactory === void 0) {\n      lineRippleFactory = function (el) {\n        return new _component3.MDCLineRipple(el);\n      };\n    }\n\n    if (helperTextFactory === void 0) {\n      helperTextFactory = function (el) {\n        return new _component7.MDCTextFieldHelperText(el);\n      };\n    }\n\n    if (characterCounterFactory === void 0) {\n      characterCounterFactory = function (el) {\n        return new _component6.MDCTextFieldCharacterCounter(el);\n      };\n    }\n\n    if (iconFactory === void 0) {\n      iconFactory = function (el) {\n        return new _component8.MDCTextFieldIcon(el);\n      };\n    }\n\n    if (labelFactory === void 0) {\n      labelFactory = function (el) {\n        return new _component2.MDCFloatingLabel(el);\n      };\n    }\n\n    if (outlineFactory === void 0) {\n      outlineFactory = function (el) {\n        return new _component4.MDCNotchedOutline(el);\n      };\n    }\n\n    this.input_ = this.root_.querySelector(_constants.strings.INPUT_SELECTOR);\n    var labelElement = this.root_.querySelector(_constants.strings.LABEL_SELECTOR);\n    this.label_ = labelElement ? labelFactory(labelElement) : null;\n    var lineRippleElement = this.root_.querySelector(_constants.strings.LINE_RIPPLE_SELECTOR);\n    this.lineRipple_ = lineRippleElement ? lineRippleFactory(lineRippleElement) : null;\n    var outlineElement = this.root_.querySelector(_constants.strings.OUTLINE_SELECTOR);\n    this.outline_ = outlineElement ? outlineFactory(outlineElement) : null; // Helper text\n\n    var helperTextStrings = _foundation4.MDCTextFieldHelperTextFoundation.strings;\n    var nextElementSibling = this.root_.nextElementSibling;\n    var hasHelperLine = nextElementSibling && nextElementSibling.classList.contains(_constants.cssClasses.HELPER_LINE);\n    var helperTextEl = hasHelperLine && nextElementSibling && nextElementSibling.querySelector(helperTextStrings.ROOT_SELECTOR);\n    this.helperText_ = helperTextEl ? helperTextFactory(helperTextEl) : null; // Character counter\n\n    var characterCounterStrings = _foundation2.MDCTextFieldCharacterCounterFoundation.strings;\n    var characterCounterEl = this.root_.querySelector(characterCounterStrings.ROOT_SELECTOR); // If character counter is not found in root element search in sibling element.\n\n    if (!characterCounterEl && hasHelperLine && nextElementSibling) {\n      characterCounterEl = nextElementSibling.querySelector(characterCounterStrings.ROOT_SELECTOR);\n    }\n\n    this.characterCounter_ = characterCounterEl ? characterCounterFactory(characterCounterEl) : null;\n    this.leadingIcon_ = null;\n    this.trailingIcon_ = null;\n    var iconElements = this.root_.querySelectorAll(_constants.strings.ICON_SELECTOR);\n\n    if (iconElements.length > 0) {\n      if (iconElements.length > 1) {\n        // Has both icons.\n        this.leadingIcon_ = iconFactory(iconElements[0]);\n        this.trailingIcon_ = iconFactory(iconElements[1]);\n      } else {\n        if (this.root_.classList.contains(_constants.cssClasses.WITH_LEADING_ICON)) {\n          this.leadingIcon_ = iconFactory(iconElements[0]);\n        } else {\n          this.trailingIcon_ = iconFactory(iconElements[0]);\n        }\n      }\n    }\n\n    this.ripple = this.createRipple_(rippleFactory);\n  };\n\n  MDCTextField.prototype.destroy = function () {\n    if (this.ripple) {\n      this.ripple.destroy();\n    }\n\n    if (this.lineRipple_) {\n      this.lineRipple_.destroy();\n    }\n\n    if (this.helperText_) {\n      this.helperText_.destroy();\n    }\n\n    if (this.characterCounter_) {\n      this.characterCounter_.destroy();\n    }\n\n    if (this.leadingIcon_) {\n      this.leadingIcon_.destroy();\n    }\n\n    if (this.trailingIcon_) {\n      this.trailingIcon_.destroy();\n    }\n\n    if (this.label_) {\n      this.label_.destroy();\n    }\n\n    if (this.outline_) {\n      this.outline_.destroy();\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * Initializes the Text Field's internal state based on the environment's\n   * state.\n   */\n\n\n  MDCTextField.prototype.initialSyncWithDOM = function () {\n    this.disabled = this.input_.disabled;\n  };\n\n  Object.defineProperty(MDCTextField.prototype, \"value\", {\n    get: function () {\n      return this.foundation_.getValue();\n    },\n\n    /**\n     * @param value The value to set on the input.\n     */\n    set: function (value) {\n      this.foundation_.setValue(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"disabled\", {\n    get: function () {\n      return this.foundation_.isDisabled();\n    },\n\n    /**\n     * @param disabled Sets the Text Field disabled or enabled.\n     */\n    set: function (disabled) {\n      this.foundation_.setDisabled(disabled);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"valid\", {\n    get: function () {\n      return this.foundation_.isValid();\n    },\n\n    /**\n     * @param valid Sets the Text Field valid or invalid.\n     */\n    set: function (valid) {\n      this.foundation_.setValid(valid);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"required\", {\n    get: function () {\n      return this.input_.required;\n    },\n\n    /**\n     * @param required Sets the Text Field to required.\n     */\n    set: function (required) {\n      this.input_.required = required;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"pattern\", {\n    get: function () {\n      return this.input_.pattern;\n    },\n\n    /**\n     * @param pattern Sets the input element's validation pattern.\n     */\n    set: function (pattern) {\n      this.input_.pattern = pattern;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"minLength\", {\n    get: function () {\n      return this.input_.minLength;\n    },\n\n    /**\n     * @param minLength Sets the input element's minLength.\n     */\n    set: function (minLength) {\n      this.input_.minLength = minLength;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"maxLength\", {\n    get: function () {\n      return this.input_.maxLength;\n    },\n\n    /**\n     * @param maxLength Sets the input element's maxLength.\n     */\n    set: function (maxLength) {\n      // Chrome throws exception if maxLength is set to a value less than zero\n      if (maxLength < 0) {\n        this.input_.removeAttribute('maxLength');\n      } else {\n        this.input_.maxLength = maxLength;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"min\", {\n    get: function () {\n      return this.input_.min;\n    },\n\n    /**\n     * @param min Sets the input element's min.\n     */\n    set: function (min) {\n      this.input_.min = min;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"max\", {\n    get: function () {\n      return this.input_.max;\n    },\n\n    /**\n     * @param max Sets the input element's max.\n     */\n    set: function (max) {\n      this.input_.max = max;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"step\", {\n    get: function () {\n      return this.input_.step;\n    },\n\n    /**\n     * @param step Sets the input element's step.\n     */\n    set: function (step) {\n      this.input_.step = step;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"helperTextContent\", {\n    /**\n     * Sets the helper text element content.\n     */\n    set: function (content) {\n      this.foundation_.setHelperTextContent(content);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"leadingIconAriaLabel\", {\n    /**\n     * Sets the aria label of the leading icon.\n     */\n    set: function (label) {\n      this.foundation_.setLeadingIconAriaLabel(label);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"leadingIconContent\", {\n    /**\n     * Sets the text content of the leading icon.\n     */\n    set: function (content) {\n      this.foundation_.setLeadingIconContent(content);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"trailingIconAriaLabel\", {\n    /**\n     * Sets the aria label of the trailing icon.\n     */\n    set: function (label) {\n      this.foundation_.setTrailingIconAriaLabel(label);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"trailingIconContent\", {\n    /**\n     * Sets the text content of the trailing icon.\n     */\n    set: function (content) {\n      this.foundation_.setTrailingIconContent(content);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextField.prototype, \"useNativeValidation\", {\n    /**\n     * Enables or disables the use of native validation. Use this for custom validation.\n     * @param useNativeValidation Set this to false to ignore native input validation.\n     */\n    set: function (useNativeValidation) {\n      this.foundation_.setUseNativeValidation(useNativeValidation);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Focuses the input element.\n   */\n\n  MDCTextField.prototype.focus = function () {\n    this.input_.focus();\n  };\n  /**\n   * Recomputes the outline SVG path for the outline element.\n   */\n\n\n  MDCTextField.prototype.layout = function () {\n    var openNotch = this.foundation_.shouldFloat;\n    this.foundation_.notchOutline(openNotch);\n  };\n\n  MDCTextField.prototype.getDefaultFoundation = function () {\n    // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n    var adapter = tslib_1.__assign({}, this.getRootAdapterMethods_(), this.getInputAdapterMethods_(), this.getLabelAdapterMethods_(), this.getLineRippleAdapterMethods_(), this.getOutlineAdapterMethods_()); // tslint:enable:object-literal-sort-keys\n\n\n    return new _foundation3.MDCTextFieldFoundation(adapter, this.getFoundationMap_());\n  };\n\n  MDCTextField.prototype.getRootAdapterMethods_ = function () {\n    var _this = this; // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    return {\n      addClass: function (className) {\n        return _this.root_.classList.add(className);\n      },\n      removeClass: function (className) {\n        return _this.root_.classList.remove(className);\n      },\n      hasClass: function (className) {\n        return _this.root_.classList.contains(className);\n      },\n      registerTextFieldInteractionHandler: function (evtType, handler) {\n        return _this.listen(evtType, handler);\n      },\n      deregisterTextFieldInteractionHandler: function (evtType, handler) {\n        return _this.unlisten(evtType, handler);\n      },\n      registerValidationAttributeChangeHandler: function (handler) {\n        var getAttributesList = function (mutationsList) {\n          return mutationsList.map(function (mutation) {\n            return mutation.attributeName;\n          }).filter(function (attributeName) {\n            return attributeName;\n          });\n        };\n\n        var observer = new MutationObserver(function (mutationsList) {\n          return handler(getAttributesList(mutationsList));\n        });\n        var config = {\n          attributes: true\n        };\n        observer.observe(_this.input_, config);\n        return observer;\n      },\n      deregisterValidationAttributeChangeHandler: function (observer) {\n        return observer.disconnect();\n      }\n    }; // tslint:enable:object-literal-sort-keys\n  };\n\n  MDCTextField.prototype.getInputAdapterMethods_ = function () {\n    var _this = this; // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    return {\n      getNativeInput: function () {\n        return _this.input_;\n      },\n      isFocused: function () {\n        return document.activeElement === _this.input_;\n      },\n      registerInputInteractionHandler: function (evtType, handler) {\n        return _this.input_.addEventListener(evtType, handler, (0, _events.applyPassive)());\n      },\n      deregisterInputInteractionHandler: function (evtType, handler) {\n        return _this.input_.removeEventListener(evtType, handler, (0, _events.applyPassive)());\n      }\n    }; // tslint:enable:object-literal-sort-keys\n  };\n\n  MDCTextField.prototype.getLabelAdapterMethods_ = function () {\n    var _this = this;\n\n    return {\n      floatLabel: function (shouldFloat) {\n        return _this.label_ && _this.label_.float(shouldFloat);\n      },\n      getLabelWidth: function () {\n        return _this.label_ ? _this.label_.getWidth() : 0;\n      },\n      hasLabel: function () {\n        return Boolean(_this.label_);\n      },\n      shakeLabel: function (shouldShake) {\n        return _this.label_ && _this.label_.shake(shouldShake);\n      }\n    };\n  };\n\n  MDCTextField.prototype.getLineRippleAdapterMethods_ = function () {\n    var _this = this;\n\n    return {\n      activateLineRipple: function () {\n        if (_this.lineRipple_) {\n          _this.lineRipple_.activate();\n        }\n      },\n      deactivateLineRipple: function () {\n        if (_this.lineRipple_) {\n          _this.lineRipple_.deactivate();\n        }\n      },\n      setLineRippleTransformOrigin: function (normalizedX) {\n        if (_this.lineRipple_) {\n          _this.lineRipple_.setRippleCenter(normalizedX);\n        }\n      }\n    };\n  };\n\n  MDCTextField.prototype.getOutlineAdapterMethods_ = function () {\n    var _this = this;\n\n    return {\n      closeOutline: function () {\n        return _this.outline_ && _this.outline_.closeNotch();\n      },\n      hasOutline: function () {\n        return Boolean(_this.outline_);\n      },\n      notchOutline: function (labelWidth) {\n        return _this.outline_ && _this.outline_.notch(labelWidth);\n      }\n    };\n  };\n  /**\n   * @return A map of all subcomponents to subfoundations.\n   */\n\n\n  MDCTextField.prototype.getFoundationMap_ = function () {\n    return {\n      characterCounter: this.characterCounter_ ? this.characterCounter_.foundation : undefined,\n      helperText: this.helperText_ ? this.helperText_.foundation : undefined,\n      leadingIcon: this.leadingIcon_ ? this.leadingIcon_.foundation : undefined,\n      trailingIcon: this.trailingIcon_ ? this.trailingIcon_.foundation : undefined\n    };\n  };\n\n  MDCTextField.prototype.createRipple_ = function (rippleFactory) {\n    var _this = this;\n\n    var isTextArea = this.root_.classList.contains(_constants.cssClasses.TEXTAREA);\n    var isOutlined = this.root_.classList.contains(_constants.cssClasses.OUTLINED);\n\n    if (isTextArea || isOutlined) {\n      return null;\n    } // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = tslib_1.__assign({}, _component5.MDCRipple.createAdapter(this), {\n      isSurfaceActive: function () {\n        return ponyfill.matches(_this.input_, ':active');\n      },\n      registerInteractionHandler: function (evtType, handler) {\n        return _this.input_.addEventListener(evtType, handler, (0, _events.applyPassive)());\n      },\n      deregisterInteractionHandler: function (evtType, handler) {\n        return _this.input_.removeEventListener(evtType, handler, (0, _events.applyPassive)());\n      }\n    }); // tslint:enable:object-literal-sort-keys\n\n\n    return rippleFactory(this.root_, new _foundation.MDCRippleFoundation(adapter));\n  };\n\n  return MDCTextField;\n}(_component.MDCComponent);\n\nexports.MDCTextField = MDCTextField;"},"sourceMaps":null,"error":null,"hash":"0d4695ba7be0195122de8749fe11e7f1","cacheData":{"env":{}}}