{"id":"utils/init.js","dependencies":[{"name":"/Users/hk/Sites/digital-forest-monitoring/package.json","includedInParent":true,"mtime":1574333047455},{"name":"@material/dialog","loc":{"line":1,"column":26},"parent":"/Users/hk/Sites/digital-forest-monitoring/src/utils/init.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/dialog/index.js"},{"name":"@material/ripple","loc":{"line":2,"column":26},"parent":"/Users/hk/Sites/digital-forest-monitoring/src/utils/init.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/ripple/index.js"},{"name":"@material/textfield","loc":{"line":3,"column":29},"parent":"/Users/hk/Sites/digital-forest-monitoring/src/utils/init.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/index.js"},{"name":"@material/textfield/icon","loc":{"line":4,"column":33},"parent":"/Users/hk/Sites/digital-forest-monitoring/src/utils/init.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/textfield/icon/index.js"},{"name":"./router","loc":{"line":5,"column":27},"parent":"/Users/hk/Sites/digital-forest-monitoring/src/utils/init.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/src/utils/router.js"},{"name":"./main_util","loc":{"line":15,"column":7},"parent":"/Users/hk/Sites/digital-forest-monitoring/src/utils/init.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/src/utils/main_util.js"},{"name":"./viewer_util","loc":{"line":16,"column":23},"parent":"/Users/hk/Sites/digital-forest-monitoring/src/utils/init.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/src/utils/viewer_util.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dialog = exports.textField = exports.init = void 0;\n\nvar _dialog = require(\"@material/dialog\");\n\nvar _ripple = require(\"@material/ripple\");\n\nvar _textfield = require(\"@material/textfield\");\n\nvar _icon = require(\"@material/textfield/icon\");\n\nvar _router = require(\"./router\");\n\nvar _main_util = require(\"./main_util\");\n\nvar _viewer_util = _interopRequireDefault(require(\"./viewer_util\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar init = function init() {\n  (0, _router.initRouter)();\n  /*\n   * normalize css vh to have correct height on mobile devices.\n   * credits: https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\n   */\n\n  var vh = window.innerHeight * 0.01; //set the value in the --vh custom property to the root of the document\n\n  document.documentElement.style.setProperty(\"--vh\", \"\".concat(vh, \"px\"));\n  window.addEventListener(\"resize\", function () {\n    // We execute the same script as before\n    var vh = window.innerHeight * 0.01;\n    document.documentElement.style.setProperty(\"--vh\", \"\".concat(vh, \"px\"));\n  });\n};\n\nexports.init = init;\nvar ripples = [].map.call(document.querySelectorAll(\".mdc-button, .mdc-card__primary-action\"), function (el) {\n  return new _ripple.MDCRipple(el);\n});\n/*\n * init and handle events for the search input\n */\n\nvar textField = new _textfield.MDCTextField(document.querySelector(\".mdc-text-field\"));\nexports.textField = textField;\ntextField.listen(\"input\", _viewer_util.default.controller.performSearch);\ntextField.listen(\"keydown\", function (e) {\n  if (e.key === \"ArrowDown\") {\n    var firstElement = document.getElementsByClassName(\"mdc-list-item\")[0];\n    firstElement.focus();\n    window.requestAnimationFrame(function () {\n      firstElement.scrollIntoView();\n    });\n  }\n});\ntextField.listen(\"focusin\", function () {\n  textField.value = \"\";\n});\nvar textFieldIcon = new _icon.MDCTextFieldIcon(document.querySelector(\".text-field-clear__icon\"));\ntextFieldIcon.listen(\"click\", function () {\n  _viewer_util.default.controller.closeSearchResults(_main_util.searchResults);\n\n  textField.value = \"\";\n  (0, _main_util.removeGeojsonOverlays)(_viewer_util.default.model.map);\n});\n/*\n * init and handle events for the modal dialog\n */\n\nvar dialog = new _dialog.MDCDialog(document.querySelector(\".mdc-dialog\"));\nexports.dialog = dialog;\ndocument.getElementById(\"impressum-button\").addEventListener(\"click\", function () {\n  _main_util.dialogTitle.innerHTML = _main_util.impressum.tite;\n  _main_util.dialogContent.innerHTML = _main_util.impressum.content;\n  dialog.open();\n});\n/* event listener to set the map height when browser gets resized.\n * neccessary because is possible that the topAppBar change it's height.\n */\n\nwindow.addEventListener(\"resize\", function () {\n  (0, _main_util.setTitle)((0, _main_util.getTitle)());\n});\n/*\n * event listener to close the sidebar\n */\n\nvar sidebarClose = document.querySelector(\".sidebar__close\");\nsidebarClose.addEventListener(\"click\", _main_util.closeSidebar);"},"sourceMaps":null,"error":null,"hash":"5c5cbbc2d1b5c9c1fbef7d975f4ca9ac","cacheData":{"env":{}}}