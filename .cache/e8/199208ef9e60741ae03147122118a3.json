{"id":"../node_modules/@material/drawer/dismissible/foundation.js","dependencies":[{"name":"/Users/hk/Sites/digital-forest-monitoring/package.json","includedInParent":true,"mtime":1573232959620},{"name":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/package.json","includedInParent":true,"mtime":1573232871885},{"name":"tslib","loc":{"line":23,"column":25},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/dismissible/foundation.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/tslib/tslib.es6.js"},{"name":"@material/base/foundation","loc":{"line":24,"column":30},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/dismissible/foundation.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/base/foundation.js"},{"name":"../constants","loc":{"line":25,"column":36},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/dismissible/foundation.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/constants.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.MDCDismissibleDrawerFoundation = void 0;\n\nvar tslib_1 = _interopRequireWildcard(require(\"tslib\"));\n\nvar _foundation = require(\"@material/base/foundation\");\n\nvar _constants = require(\"../constants\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar MDCDismissibleDrawerFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCDismissibleDrawerFoundation, _super);\n\n  function MDCDismissibleDrawerFoundation(adapter) {\n    var _this = _super.call(this, tslib_1.__assign({}, MDCDismissibleDrawerFoundation.defaultAdapter, adapter)) || this;\n\n    _this.animationFrame_ = 0;\n    _this.animationTimer_ = 0;\n    return _this;\n  }\n\n  Object.defineProperty(MDCDismissibleDrawerFoundation, \"strings\", {\n    get: function () {\n      return _constants.strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCDismissibleDrawerFoundation, \"cssClasses\", {\n    get: function () {\n      return _constants.cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCDismissibleDrawerFoundation, \"defaultAdapter\", {\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        hasClass: function () {\n          return false;\n        },\n        elementHasClass: function () {\n          return false;\n        },\n        notifyClose: function () {\n          return undefined;\n        },\n        notifyOpen: function () {\n          return undefined;\n        },\n        saveFocus: function () {\n          return undefined;\n        },\n        restoreFocus: function () {\n          return undefined;\n        },\n        focusActiveNavigationItem: function () {\n          return undefined;\n        },\n        trapFocus: function () {\n          return undefined;\n        },\n        releaseFocus: function () {\n          return undefined;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCDismissibleDrawerFoundation.prototype.destroy = function () {\n    if (this.animationFrame_) {\n      cancelAnimationFrame(this.animationFrame_);\n    }\n\n    if (this.animationTimer_) {\n      clearTimeout(this.animationTimer_);\n    }\n  };\n  /**\n   * Opens the drawer from the closed state.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.open = function () {\n    var _this = this;\n\n    if (this.isOpen() || this.isOpening() || this.isClosing()) {\n      return;\n    }\n\n    this.adapter_.addClass(_constants.cssClasses.OPEN);\n    this.adapter_.addClass(_constants.cssClasses.ANIMATE); // Wait a frame once display is no longer \"none\", to establish basis for animation\n\n    this.runNextAnimationFrame_(function () {\n      _this.adapter_.addClass(_constants.cssClasses.OPENING);\n    });\n    this.adapter_.saveFocus();\n  };\n  /**\n   * Closes the drawer from the open state.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.close = function () {\n    if (!this.isOpen() || this.isOpening() || this.isClosing()) {\n      return;\n    }\n\n    this.adapter_.addClass(_constants.cssClasses.CLOSING);\n  };\n  /**\n   * Returns true if the drawer is in the open position.\n   * @return true if drawer is in open state.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.isOpen = function () {\n    return this.adapter_.hasClass(_constants.cssClasses.OPEN);\n  };\n  /**\n   * Returns true if the drawer is animating open.\n   * @return true if drawer is animating open.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.isOpening = function () {\n    return this.adapter_.hasClass(_constants.cssClasses.OPENING) || this.adapter_.hasClass(_constants.cssClasses.ANIMATE);\n  };\n  /**\n   * Returns true if the drawer is animating closed.\n   * @return true if drawer is animating closed.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.isClosing = function () {\n    return this.adapter_.hasClass(_constants.cssClasses.CLOSING);\n  };\n  /**\n   * Keydown handler to close drawer when key is escape.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.handleKeydown = function (evt) {\n    var keyCode = evt.keyCode,\n        key = evt.key;\n    var isEscape = key === 'Escape' || keyCode === 27;\n\n    if (isEscape) {\n      this.close();\n    }\n  };\n  /**\n   * Handles the `transitionend` event when the drawer finishes opening/closing.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.handleTransitionEnd = function (evt) {\n    var OPENING = _constants.cssClasses.OPENING,\n        CLOSING = _constants.cssClasses.CLOSING,\n        OPEN = _constants.cssClasses.OPEN,\n        ANIMATE = _constants.cssClasses.ANIMATE,\n        ROOT = _constants.cssClasses.ROOT; // In Edge, transitionend on ripple pseudo-elements yields a target without classList, so check for Element first.\n\n    var isRootElement = this.isElement_(evt.target) && this.adapter_.elementHasClass(evt.target, ROOT);\n\n    if (!isRootElement) {\n      return;\n    }\n\n    if (this.isClosing()) {\n      this.adapter_.removeClass(OPEN);\n      this.closed_();\n      this.adapter_.restoreFocus();\n      this.adapter_.notifyClose();\n    } else {\n      this.adapter_.focusActiveNavigationItem();\n      this.opened_();\n      this.adapter_.notifyOpen();\n    }\n\n    this.adapter_.removeClass(ANIMATE);\n    this.adapter_.removeClass(OPENING);\n    this.adapter_.removeClass(CLOSING);\n  };\n  /**\n   * Extension point for when drawer finishes open animation.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.opened_ = function () {}; // tslint:disable-line:no-empty\n\n  /**\n   * Extension point for when drawer finishes close animation.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.closed_ = function () {}; // tslint:disable-line:no-empty\n\n  /**\n   * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.runNextAnimationFrame_ = function (callback) {\n    var _this = this;\n\n    cancelAnimationFrame(this.animationFrame_);\n    this.animationFrame_ = requestAnimationFrame(function () {\n      _this.animationFrame_ = 0;\n      clearTimeout(_this.animationTimer_);\n      _this.animationTimer_ = setTimeout(callback, 0);\n    });\n  };\n\n  MDCDismissibleDrawerFoundation.prototype.isElement_ = function (element) {\n    // In Edge, transitionend on ripple pseudo-elements yields a target without classList.\n    return Boolean(element.classList);\n  };\n\n  return MDCDismissibleDrawerFoundation;\n}(_foundation.MDCFoundation);\n\nexports.MDCDismissibleDrawerFoundation = MDCDismissibleDrawerFoundation;\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nvar _default = MDCDismissibleDrawerFoundation;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"4cf20272387e0f7d17da3a7c0e66f5b3","cacheData":{"env":{}}}