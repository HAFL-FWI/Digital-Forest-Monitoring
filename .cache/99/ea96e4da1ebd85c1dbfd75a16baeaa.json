{"id":"../node_modules/ol/tilegrid.js","dependencies":[{"name":"/Users/hk/Sites/digital-forest-monitoring/package.json","includedInParent":true,"mtime":1574333047455},{"name":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/package.json","includedInParent":true,"mtime":1573122283680},{"name":"./tilegrid/common.js","loc":{"line":4,"column":52},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/tilegrid.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/tilegrid/common.js"},{"name":"./size.js","loc":{"line":5,"column":23},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/tilegrid.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/size.js"},{"name":"./extent.js","loc":{"line":6,"column":83},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/tilegrid.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/extent.js"},{"name":"./extent/Corner.js","loc":{"line":7,"column":19},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/tilegrid.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/extent/Corner.js"},{"name":"./proj.js","loc":{"line":8,"column":54},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/tilegrid.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/proj.js"},{"name":"./proj/Units.js","loc":{"line":9,"column":18},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/tilegrid.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/proj/Units.js"},{"name":"./tilegrid/TileGrid.js","loc":{"line":10,"column":21},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/tilegrid.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/ol/tilegrid/TileGrid.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getForProjection = getForProjection;\nexports.wrapX = wrapX;\nexports.createForExtent = createForExtent;\nexports.createXYZ = createXYZ;\nexports.createForProjection = createForProjection;\nexports.extentFromProjection = extentFromProjection;\n\nvar _common = require(\"./tilegrid/common.js\");\n\nvar _size = require(\"./size.js\");\n\nvar _extent = require(\"./extent.js\");\n\nvar _Corner = _interopRequireDefault(require(\"./extent/Corner.js\"));\n\nvar _proj = require(\"./proj.js\");\n\nvar _Units = _interopRequireDefault(require(\"./proj/Units.js\"));\n\nvar _TileGrid = _interopRequireDefault(require(\"./tilegrid/TileGrid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @module ol/tilegrid\n */\n\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\nfunction getForProjection(projection) {\n  var tileGrid = projection.getDefaultTileGrid();\n\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n\n  return tileGrid;\n}\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\n\n\nfunction wrapX(tileGrid, tileCoord, projection) {\n  var z = tileCoord[0];\n  var center = tileGrid.getTileCoordCenter(tileCoord);\n  var projectionExtent = extentFromProjection(projection);\n\n  if (!(0, _extent.containsCoordinate)(projectionExtent, center)) {\n    var worldWidth = (0, _extent.getWidth)(projectionExtent);\n    var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  } else {\n    return tileCoord;\n  }\n}\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {Corner=} opt_corner Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\n\n\nfunction createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {\n  var corner = opt_corner !== undefined ? opt_corner : _Corner.default.TOP_LEFT;\n  var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);\n  return new _TileGrid.default({\n    extent: extent,\n    origin: (0, _extent.getCorner)(extent, corner),\n    resolutions: resolutions,\n    tileSize: opt_tileSize\n  });\n}\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. The zero level of the grid is defined by the resolution at which one tile fits in the\n * provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions=} opt_options Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\n\n\nfunction createXYZ(opt_options) {\n  var xyzOptions = opt_options || {};\n  var extent = xyzOptions.extent || (0, _proj.get)('EPSG:3857').getExtent();\n  var gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize)\n  };\n  return new _TileGrid.default(gridOptions);\n}\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @return {!Array<number>} Resolutions array.\n */\n\n\nfunction resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize) {\n  var maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : _common.DEFAULT_MAX_ZOOM;\n  var height = (0, _extent.getHeight)(extent);\n  var width = (0, _extent.getWidth)(extent);\n  var tileSize = (0, _size.toSize)(opt_tileSize !== undefined ? opt_tileSize : _common.DEFAULT_TILE_SIZE);\n  var maxResolution = Math.max(width / tileSize[0], height / tileSize[1]);\n  var length = maxZoom + 1;\n  var resolutions = new Array(length);\n\n  for (var z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n\n  return resolutions;\n}\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {Corner=} opt_corner Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\n\n\nfunction createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {\n  var extent = extentFromProjection(projection);\n  return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);\n}\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\n\n\nfunction extentFromProjection(projection) {\n  projection = (0, _proj.get)(projection);\n  var extent = projection.getExtent();\n\n  if (!extent) {\n    var half = 180 * _proj.METERS_PER_UNIT[_Units.default.DEGREES] / projection.getMetersPerUnit();\n    extent = (0, _extent.createOrUpdate)(-half, -half, half, half);\n  }\n\n  return extent;\n}"},"sourceMaps":null,"error":null,"hash":"76e4ac1c2e13a136ed51d4c467d12e85","cacheData":{"env":{}}}