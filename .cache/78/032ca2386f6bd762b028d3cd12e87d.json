{"id":"../node_modules/@material/drawer/component.js","dependencies":[{"name":"/Users/hk/Sites/digital-forest-monitoring/package.json","includedInParent":true,"mtime":1573232959620},{"name":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/package.json","includedInParent":true,"mtime":1573232871885},{"name":"tslib","loc":{"line":23,"column":25},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/tslib/tslib.es6.js"},{"name":"@material/base/component","loc":{"line":24,"column":29},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/base/component.js"},{"name":"@material/list/component","loc":{"line":25,"column":24},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/list/component.js"},{"name":"@material/list/foundation","loc":{"line":26,"column":34},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/list/foundation.js"},{"name":"focus-trap","loc":{"line":27,"column":43},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/focus-trap/index.js"},{"name":"./dismissible/foundation","loc":{"line":28,"column":47},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/dismissible/foundation.js"},{"name":"./modal/foundation","loc":{"line":29,"column":41},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/modal/foundation.js"},{"name":"./util","loc":{"line":30,"column":22},"parent":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/component.js","resolved":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@material/drawer/util.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MDCDrawer = void 0;\n\nvar tslib_1 = _interopRequireWildcard(require(\"tslib\"));\n\nvar _component = require(\"@material/base/component\");\n\nvar _component2 = require(\"@material/list/component\");\n\nvar _foundation = require(\"@material/list/foundation\");\n\nvar _focusTrap = _interopRequireDefault(require(\"focus-trap\"));\n\nvar _foundation2 = require(\"./dismissible/foundation\");\n\nvar _foundation3 = require(\"./modal/foundation\");\n\nvar util = _interopRequireWildcard(require(\"./util\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar cssClasses = _foundation2.MDCDismissibleDrawerFoundation.cssClasses,\n    strings = _foundation2.MDCDismissibleDrawerFoundation.strings;\n/**\n * @events `MDCDrawer:closed {}` Emits when the navigation drawer has closed.\n * @events `MDCDrawer:opened {}` Emits when the navigation drawer has opened.\n */\n\nvar MDCDrawer =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCDrawer, _super);\n\n  function MDCDrawer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCDrawer.attachTo = function (root) {\n    return new MDCDrawer(root);\n  };\n\n  Object.defineProperty(MDCDrawer.prototype, \"open\", {\n    /**\n     * @return boolean Proxies to the foundation's `open`/`close` methods.\n     * Also returns true if drawer is in the open position.\n     */\n    get: function () {\n      return this.foundation_.isOpen();\n    },\n\n    /**\n     * Toggles the drawer open and closed.\n     */\n    set: function (isOpen) {\n      if (isOpen) {\n        this.foundation_.open();\n      } else {\n        this.foundation_.close();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCDrawer.prototype, \"list\", {\n    get: function () {\n      return this.list_;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCDrawer.prototype.initialize = function (focusTrapFactory, listFactory) {\n    if (focusTrapFactory === void 0) {\n      focusTrapFactory = _focusTrap.default;\n    }\n\n    if (listFactory === void 0) {\n      listFactory = function (el) {\n        return new _component2.MDCList(el);\n      };\n    }\n\n    var listEl = this.root_.querySelector(\".\" + _foundation.MDCListFoundation.cssClasses.ROOT);\n\n    if (listEl) {\n      this.list_ = listFactory(listEl);\n      this.list_.wrapFocus = true;\n    }\n\n    this.focusTrapFactory_ = focusTrapFactory;\n  };\n\n  MDCDrawer.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    var MODAL = cssClasses.MODAL;\n    var SCRIM_SELECTOR = strings.SCRIM_SELECTOR;\n    this.scrim_ = this.root_.parentNode.querySelector(SCRIM_SELECTOR);\n\n    if (this.scrim_ && this.root_.classList.contains(MODAL)) {\n      this.handleScrimClick_ = function () {\n        return _this.foundation_.handleScrimClick();\n      };\n\n      this.scrim_.addEventListener('click', this.handleScrimClick_);\n      this.focusTrap_ = util.createFocusTrapInstance(this.root_, this.focusTrapFactory_);\n    }\n\n    this.handleKeydown_ = function (evt) {\n      return _this.foundation_.handleKeydown(evt);\n    };\n\n    this.handleTransitionEnd_ = function (evt) {\n      return _this.foundation_.handleTransitionEnd(evt);\n    };\n\n    this.listen('keydown', this.handleKeydown_);\n    this.listen('transitionend', this.handleTransitionEnd_);\n  };\n\n  MDCDrawer.prototype.destroy = function () {\n    this.unlisten('keydown', this.handleKeydown_);\n    this.unlisten('transitionend', this.handleTransitionEnd_);\n\n    if (this.list_) {\n      this.list_.destroy();\n    }\n\n    var MODAL = cssClasses.MODAL;\n\n    if (this.scrim_ && this.handleScrimClick_ && this.root_.classList.contains(MODAL)) {\n      this.scrim_.removeEventListener('click', this.handleScrimClick_); // Ensure drawer is closed to hide scrim and release focus\n\n      this.open = false;\n    }\n  };\n\n  MDCDrawer.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = {\n      addClass: function (className) {\n        return _this.root_.classList.add(className);\n      },\n      removeClass: function (className) {\n        return _this.root_.classList.remove(className);\n      },\n      hasClass: function (className) {\n        return _this.root_.classList.contains(className);\n      },\n      elementHasClass: function (element, className) {\n        return element.classList.contains(className);\n      },\n      saveFocus: function () {\n        return _this.previousFocus_ = document.activeElement;\n      },\n      restoreFocus: function () {\n        var previousFocus = _this.previousFocus_;\n\n        if (previousFocus && previousFocus.focus && _this.root_.contains(document.activeElement)) {\n          previousFocus.focus();\n        }\n      },\n      focusActiveNavigationItem: function () {\n        var activeNavItemEl = _this.root_.querySelector(\".\" + _foundation.MDCListFoundation.cssClasses.LIST_ITEM_ACTIVATED_CLASS);\n\n        if (activeNavItemEl) {\n          activeNavItemEl.focus();\n        }\n      },\n      notifyClose: function () {\n        return _this.emit(strings.CLOSE_EVENT, {}, true\n        /* shouldBubble */\n        );\n      },\n      notifyOpen: function () {\n        return _this.emit(strings.OPEN_EVENT, {}, true\n        /* shouldBubble */\n        );\n      },\n      trapFocus: function () {\n        return _this.focusTrap_.activate();\n      },\n      releaseFocus: function () {\n        return _this.focusTrap_.deactivate();\n      }\n    }; // tslint:enable:object-literal-sort-keys\n\n    var DISMISSIBLE = cssClasses.DISMISSIBLE,\n        MODAL = cssClasses.MODAL;\n\n    if (this.root_.classList.contains(DISMISSIBLE)) {\n      return new _foundation2.MDCDismissibleDrawerFoundation(adapter);\n    } else if (this.root_.classList.contains(MODAL)) {\n      return new _foundation3.MDCModalDrawerFoundation(adapter);\n    } else {\n      throw new Error(\"MDCDrawer: Failed to instantiate component. Supported variants are \" + DISMISSIBLE + \" and \" + MODAL + \".\");\n    }\n  };\n\n  return MDCDrawer;\n}(_component.MDCComponent);\n\nexports.MDCDrawer = MDCDrawer;"},"sourceMaps":null,"error":null,"hash":"318238da5b4f375bdb2c0d041c69c797","cacheData":{"env":{}}}