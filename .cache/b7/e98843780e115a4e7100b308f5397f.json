{"id":"../node_modules/@tarekraafat/autocomplete.js/dist/js/autoComplete.js","dependencies":[{"name":"/Users/hk/Sites/digital-forest-monitoring/package.json","includedInParent":true,"mtime":1574254196589},{"name":"/Users/hk/Sites/digital-forest-monitoring/node_modules/@tarekraafat/autocomplete.js/package.json","includedInParent":true,"mtime":1574253502398}],"generated":{"js":"var define;\nvar global = arguments[3];\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.autoComplete = factory());\n}(this, (function () { 'use strict';\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  var dataAttribute = \"data-id\";\n  var select = {\n    resultsList: \"autoComplete_list\",\n    result: \"autoComplete_result\",\n    highlight: \"autoComplete_highlighted\",\n    selectedResult: \"autoComplete_selected\"\n  };\n  var keys = {\n    ENTER: 13,\n    ARROW_UP: 38,\n    ARROW_DOWN: 40\n  };\n  var getInput = function getInput(selector) {\n    return typeof selector === \"string\" ? document.querySelector(selector) : selector();\n  };\n  var createResultsList = function createResultsList(renderResults) {\n    var resultsList = document.createElement(renderResults.element);\n    resultsList.setAttribute(\"id\", select.resultsList);\n    if (renderResults.container) {\n      renderResults.container(resultsList);\n    }\n    renderResults.destination.insertAdjacentElement(renderResults.position, resultsList);\n    return resultsList;\n  };\n  var highlight = function highlight(value) {\n    return \"<span class=\".concat(select.highlight, \">\").concat(value, \"</span>\");\n  };\n  var addResultsToList = function addResultsToList(resultsList, dataSrc, resultItem) {\n    var fragment = document.createDocumentFragment();\n    dataSrc.forEach(function (event, record) {\n      var result = document.createElement(resultItem.element);\n      var resultIndex = dataSrc[record].index;\n      result.setAttribute(dataAttribute, resultIndex);\n      result.setAttribute(\"class\", select.result);\n      resultItem.content ? resultItem.content(event, result) : result.innerHTML = event.match || event;\n      fragment.appendChild(result);\n    });\n    resultsList.appendChild(fragment);\n  };\n  var clearResults = function clearResults(resultsList) {\n    return resultsList.innerHTML = \"\";\n  };\n  var onSelection = function onSelection(event, field, resultsList, feedback, resultsValues, selection) {\n    feedback({\n      event: event,\n      query: field instanceof HTMLInputElement ? field.value : field.innerHTML,\n      matches: resultsValues.matches,\n      results: resultsValues.list.map(function (record) {\n        return record.value;\n      }),\n      selection: resultsValues.list.find(function (value) {\n        if (event.keyCode === keys.ENTER) {\n          return value.index === Number(selection.getAttribute(dataAttribute));\n        } else if (event.type === \"mousedown\") {\n          return value.index === Number(event.currentTarget.getAttribute(dataAttribute));\n        }\n      })\n    });\n    clearResults(resultsList);\n  };\n  var navigation = function navigation(input, resultsList, feedback, resultsValues) {\n    var li = resultsList.childNodes,\n        liLength = li.length - 1;\n    var liSelected = undefined,\n        next;\n    var removeSelection = function removeSelection(direction) {\n      liSelected.classList.remove(select.selectedResult);\n      if (direction === 1) {\n        next = liSelected.nextSibling;\n      } else {\n        next = liSelected.previousSibling;\n      }\n    };\n    var highlightSelection = function highlightSelection(current) {\n      liSelected = current;\n      liSelected.classList.add(select.selectedResult);\n    };\n    input.onkeydown = function (event) {\n      if (li.length > 0) {\n        switch (event.keyCode) {\n          case keys.ARROW_UP:\n            if (liSelected) {\n              removeSelection(0);\n              if (next) {\n                highlightSelection(next);\n              } else {\n                highlightSelection(li[liLength]);\n              }\n            } else {\n              highlightSelection(li[liLength]);\n            }\n            break;\n          case keys.ARROW_DOWN:\n            if (liSelected) {\n              removeSelection(1);\n              if (next) {\n                highlightSelection(next);\n              } else {\n                highlightSelection(li[0]);\n              }\n            } else {\n              highlightSelection(li[0]);\n            }\n            break;\n          case keys.ENTER:\n            if (liSelected) {\n              onSelection(event, input, resultsList, feedback, resultsValues, liSelected);\n            }\n        }\n      }\n    };\n    li.forEach(function (selection) {\n      selection.onmousedown = function (event) {\n        return onSelection(event, input, resultsList, feedback, resultsValues);\n      };\n    });\n  };\n  var autoCompleteView = {\n    getInput: getInput,\n    createResultsList: createResultsList,\n    highlight: highlight,\n    addResultsToList: addResultsToList,\n    navigation: navigation,\n    clearResults: clearResults\n  };\n\n  var CustomEventPolyfill = function CustomEventPolyfill(event, params) {\n    params = params || {\n      bubbles: false,\n      cancelable: false,\n      detail: undefined\n    };\n    var evt = document.createEvent(\"CustomEvent\");\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n    return evt;\n  };\n  CustomEventPolyfill.prototype = window.Event.prototype;\n  var CustomEventWrapper = typeof window.CustomEvent === \"function\" && window.CustomEvent || CustomEventPolyfill;\n  var initElementClosestPolyfill = function initElementClosestPolyfill() {\n    if (!Element.prototype.matches) {\n      Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n    }\n    if (!Element.prototype.closest) {\n      Element.prototype.closest = function (s) {\n        var el = this;\n        do {\n          if (el.matches(s)) {\n            return el;\n          }\n          el = el.parentElement || el.parentNode;\n        } while (el !== null && el.nodeType === 1);\n        return null;\n      };\n    }\n  };\n  var Polyfill = {\n    CustomEventWrapper: CustomEventWrapper,\n    initElementClosestPolyfill: initElementClosestPolyfill\n  };\n\n  var autoComplete =\n  function () {\n    function autoComplete(config) {\n      _classCallCheck(this, autoComplete);\n      var _config$selector = config.selector,\n          selector = _config$selector === void 0 ? \"#autoComplete\" : _config$selector,\n          _config$data = config.data,\n          key = _config$data.key,\n          _src = _config$data.src,\n          _config$data$cache = _config$data.cache,\n          cache = _config$data$cache === void 0 ? true : _config$data$cache,\n          query = config.query,\n          _config$trigger = config.trigger;\n      _config$trigger = _config$trigger === void 0 ? {} : _config$trigger;\n      var _config$trigger$event = _config$trigger.event,\n          event = _config$trigger$event === void 0 ? [\"input\"] : _config$trigger$event,\n          _config$trigger$condi = _config$trigger.condition,\n          condition = _config$trigger$condi === void 0 ? false : _config$trigger$condi,\n          _config$searchEngine = config.searchEngine,\n          searchEngine = _config$searchEngine === void 0 ? \"strict\" : _config$searchEngine,\n          _config$threshold = config.threshold,\n          threshold = _config$threshold === void 0 ? 0 : _config$threshold,\n          _config$debounce = config.debounce,\n          debounce = _config$debounce === void 0 ? 0 : _config$debounce,\n          _config$resultsList = config.resultsList;\n      _config$resultsList = _config$resultsList === void 0 ? {} : _config$resultsList;\n      var _config$resultsList$r = _config$resultsList.render,\n          render = _config$resultsList$r === void 0 ? false : _config$resultsList$r,\n          _config$resultsList$c = _config$resultsList.container,\n          container = _config$resultsList$c === void 0 ? false : _config$resultsList$c,\n          destination = _config$resultsList.destination,\n          _config$resultsList$p = _config$resultsList.position,\n          position = _config$resultsList$p === void 0 ? \"afterend\" : _config$resultsList$p,\n          _config$resultsList$e = _config$resultsList.element,\n          resultsListElement = _config$resultsList$e === void 0 ? \"ul\" : _config$resultsList$e,\n          _config$resultsList$n = _config$resultsList.navigation,\n          navigation = _config$resultsList$n === void 0 ? false : _config$resultsList$n,\n          _config$sort = config.sort,\n          sort = _config$sort === void 0 ? false : _config$sort,\n          placeHolder = config.placeHolder,\n          _config$maxResults = config.maxResults,\n          maxResults = _config$maxResults === void 0 ? 5 : _config$maxResults,\n          _config$resultItem = config.resultItem;\n      _config$resultItem = _config$resultItem === void 0 ? {} : _config$resultItem;\n      var _config$resultItem$co = _config$resultItem.content,\n          content = _config$resultItem$co === void 0 ? false : _config$resultItem$co,\n          _config$resultItem$el = _config$resultItem.element,\n          resultItemElement = _config$resultItem$el === void 0 ? \"li\" : _config$resultItem$el,\n          noResults = config.noResults,\n          _config$highlight = config.highlight,\n          highlight = _config$highlight === void 0 ? false : _config$highlight,\n          onSelection = config.onSelection;\n      var resultsListView = render ? autoCompleteView.createResultsList({\n        container: container,\n        destination: destination || autoCompleteView.getInput(selector),\n        position: position,\n        element: resultsListElement\n      }) : null;\n      this.selector = selector;\n      this.data = {\n        src: function src() {\n          return typeof _src === \"function\" ? _src() : _src;\n        },\n        key: key,\n        cache: cache\n      };\n      this.query = query;\n      this.trigger = {\n        event: event,\n        condition: condition\n      };\n      this.searchEngine = searchEngine === \"loose\" ? \"loose\" : typeof searchEngine === \"function\" ? searchEngine : \"strict\";\n      this.threshold = threshold;\n      this.debounce = debounce;\n      this.resultsList = {\n        render: render,\n        view: resultsListView,\n        navigation: navigation\n      };\n      this.sort = sort;\n      this.placeHolder = placeHolder;\n      this.maxResults = maxResults;\n      this.resultItem = {\n        content: content,\n        element: resultItemElement\n      };\n      this.noResults = noResults;\n      this.highlight = highlight;\n      this.onSelection = onSelection;\n      this.init();\n    }\n    _createClass(autoComplete, [{\n      key: \"search\",\n      value: function search(query, record) {\n        var recordLowerCase = record.toLowerCase();\n        if (this.searchEngine === \"loose\") {\n          query = query.replace(/ /g, \"\");\n          var match = [];\n          var searchPosition = 0;\n          for (var number = 0; number < recordLowerCase.length; number++) {\n            var recordChar = record[number];\n            if (searchPosition < query.length && recordLowerCase[number] === query[searchPosition]) {\n              recordChar = this.highlight ? autoCompleteView.highlight(recordChar) : recordChar;\n              searchPosition++;\n            }\n            match.push(recordChar);\n          }\n          if (searchPosition !== query.length) {\n            return false;\n          }\n          return match.join(\"\");\n        } else {\n          if (recordLowerCase.includes(query)) {\n            var pattern = new RegExp(\"\".concat(query), \"i\");\n            query = pattern.exec(record);\n            return this.highlight ? record.replace(query, autoCompleteView.highlight(query)) : record;\n          }\n        }\n      }\n    }, {\n      key: \"listMatchedResults\",\n      value: function listMatchedResults(data) {\n        var _this = this;\n        return new Promise(function (resolve) {\n          var resList = [];\n          data.filter(function (record, index) {\n            var search = function search(key) {\n              var recordValue = key ? record[key] : record;\n              if (recordValue) {\n                var match = typeof _this.searchEngine === \"function\" ? _this.searchEngine(_this.queryValue, recordValue) : _this.search(_this.queryValue, recordValue);\n                if (match && key) {\n                  resList.push({\n                    key: key,\n                    index: index,\n                    match: match,\n                    value: record\n                  });\n                } else if (match && !key) {\n                  resList.push({\n                    index: index,\n                    match: match,\n                    value: record\n                  });\n                }\n              }\n            };\n            if (_this.data.key) {\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n              try {\n                for (var _iterator = _this.data.key[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  var key = _step.value;\n                  search(key);\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                    _iterator[\"return\"]();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n            } else {\n              search();\n            }\n          });\n          var list = _this.sort ? resList.sort(_this.sort).slice(0, _this.maxResults) : resList.slice(0, _this.maxResults);\n          return resolve({\n            matches: resList.length,\n            list: list\n          });\n        });\n      }\n    }, {\n      key: \"ignite\",\n      value: function ignite() {\n        var _this2 = this;\n        var input = autoCompleteView.getInput(this.selector);\n        if (this.placeHolder) {\n          input.setAttribute(\"placeholder\", this.placeHolder);\n        }\n        var debounce = function debounce(func, delay) {\n          var inDebounce;\n          return function () {\n            var context = this;\n            var args = arguments;\n            clearTimeout(inDebounce);\n            inDebounce = setTimeout(function () {\n              return func.apply(context, args);\n            }, delay);\n          };\n        };\n        var exec = function exec(event) {\n          var inputValue = input instanceof HTMLInputElement || input instanceof HTMLTextAreaElement ? input.value.toLowerCase() : input.innerHTML.toLowerCase();\n          var queryValue = _this2.queryValue = _this2.query && _this2.query.manipulate ? _this2.query.manipulate(inputValue) : inputValue;\n          var renderResultsList = _this2.resultsList.render;\n          var triggerCondition = _this2.trigger.condition ? _this2.trigger.condition(queryValue) : queryValue.length > _this2.threshold && queryValue.replace(/ /g, \"\").length;\n          var eventEmitter = function eventEmitter(event, results) {\n            input.dispatchEvent(new Polyfill.CustomEventWrapper(\"autoComplete\", {\n              bubbles: true,\n              detail: {\n                event: event,\n                input: inputValue,\n                query: queryValue,\n                matches: results ? results.matches : null,\n                results: results ? results.list : null\n              },\n              cancelable: true\n            }));\n          };\n          if (renderResultsList) {\n            var resultsList = _this2.resultsList.view;\n            var clearResults = autoCompleteView.clearResults(resultsList);\n            if (triggerCondition) {\n              _this2.listMatchedResults(_this2.dataStream, event).then(function (list) {\n                eventEmitter(event, list);\n                if (_this2.resultsList.render) {\n                  if (list.list.length === 0 && _this2.noResults) {\n                    _this2.noResults();\n                  } else {\n                    autoCompleteView.addResultsToList(resultsList, list.list, _this2.resultItem);\n                    if (_this2.onSelection) {\n                      _this2.resultsList.navigation ? _this2.resultsList.navigation(event, input, resultsList, _this2.onSelection, list) : autoCompleteView.navigation(input, resultsList, _this2.onSelection, list);\n                    }\n                  }\n                }\n              });\n            } else {\n              eventEmitter(event);\n            }\n          } else if (!renderResultsList && triggerCondition) {\n            _this2.listMatchedResults(_this2.dataStream, event).then(function (list) {\n              eventEmitter(event, list);\n            });\n          }\n        };\n        var run = function run(event) {\n          Promise.resolve(_this2.data.cache ? _this2.dataStream : _this2.data.src()).then(function (data) {\n            _this2.dataStream = data;\n            exec(event);\n          });\n        };\n        this.trigger.event.forEach(function (eventType) {\n          input.addEventListener(eventType, debounce(function (event) {\n            return run(event);\n          }, _this2.debounce));\n        });\n      }\n    }, {\n      key: \"init\",\n      value: function init() {\n        var _this3 = this;\n        if (this.data.cache) {\n          Promise.resolve(this.data.src()).then(function (data) {\n            _this3.dataStream = data;\n            _this3.ignite();\n          });\n        } else {\n          this.ignite();\n        }\n        Polyfill.initElementClosestPolyfill();\n      }\n    }]);\n    return autoComplete;\n  }();\n\n  return autoComplete;\n\n})));\n"},"sourceMaps":null,"error":null,"hash":"7b61b82f5c7276d2594153ba7c0e3f41","cacheData":{"env":{}}}