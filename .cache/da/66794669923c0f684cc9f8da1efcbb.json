{"id":"utils/services_util.js","dependencies":[{"name":"/Users/hk/Sites/digital-forest-monitoring/package.json","includedInParent":true,"mtime":1574333047455}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar servicesUtil = {\n  model: {\n    /*\n     * the element with the homepage content.\n     */\n    content: document.getElementsByClassName(\"content\")[0],\n\n    /*\n     * homepage jumbotron text.\n     */\n    jumbotronText: \"Unsere Geodienste können auf vielfältige Art genutzt werden. \" + \"Sie können Sie in Ihr GIS einbinden und so mit Ihren eigenen Geodaten \" + \"kombinieren oder auch in andere Applikationen wie z.B. \" + \"die Collector App von Esri einbinden.\",\n\n    /*\n     * content for every card on the hompage.\n     */\n    cards: {\n      veraenderung: {\n        title: \"Web Map Service (WMS)\",\n        subtitle: \"Provided by: karten-werk GmbH\",\n        description: \"Dieser OGC konforme WMS liefert Kartenbilder- Layer und Legendeninformationen.\",\n        serviceUrl: \"https://geoserver.karten-werk.ch/wms?request=GetCapabilities\",\n        videoUrl: \"https://www.youtube.com/embed/g7t_tz2OJpg\"\n      },\n      stoerung: {\n        title: \"Web Map Tile Service (WMTS)\",\n        subtitle: \"Provided by: karten-werk GmbH\",\n        description: \"Der WMTS Service liefert vorprozessierte (gecachte) Bilder und ist somit schneller als der WMS Service.\\n          Er eignet sich gut zum Einbinden in Web Applikationen wo man nicht immer mit einem schneller Internet rechnen kann.\",\n        serviceUrl: \"https://geoserver.karten-werk.ch/gwc/service/wmts?request=getCapabilities\",\n        videoUrl: \"https://www.youtube.com/embed/g7t_tz2OJpg\"\n      },\n      geodienste: {\n        title: \"Web Feature Service (WFS)\",\n        subtitle: \"Provided by: karten-werk GmbH\",\n        description: \"Der WFS Service lierfert Vektor Geometrien inklusive Attribut Informationen.\\n          Er l\\xE4sst sich in verschiedene GIS Systemen einbinden und bei Bedarf kann man die Daten exportieren und lokal abspeichern.\",\n        serviceUrl: \"https://geoserver.karten-werk.ch/wfs?request=GetCapabilities\",\n        videoUrl: \"https://www.youtube.com/embed/aZbNjFLe884\"\n      }\n    }\n  },\n  controller: {\n    /*\n     * calls the necessary functions to display the hompage.\n     */\n    init: function init() {\n      servicesUtil.controller.removeContent();\n      servicesUtil.controller.createJumbotron();\n      servicesUtil.controller.createServiceCards();\n    },\n\n    /*\n     * removes 'old' content like viewers, services etc.\n     */\n    removeContent: function removeContent() {\n      servicesUtil.model.content.innerHTML = \"\";\n    },\n\n    /*\n     * displays the jumbotron.\n     */\n    createJumbotron: function createJumbotron() {\n      var jumbotron = servicesUtil.view.createJumbotron(servicesUtil.model.jumbotronText);\n      servicesUtil.model.content.appendChild(jumbotron);\n    },\n\n    /*\n     * creates all the grid with the cards on the homepage.\n     * does not have any parameters, but uses the model.cards object and some view functions to get the job done.\n     * @returns {DocumentFragment} - The grid with all the cards that were attached to the DOM.\n     */\n    createServiceCards: function createServiceCards() {\n      var grid = servicesUtil.view.createGrid();\n      var cards = document.createDocumentFragment();\n\n      for (var card in servicesUtil.model.cards) {\n        var cardElement = servicesUtil.view.createCard(servicesUtil.model.cards[card]);\n        cards.appendChild(cardElement);\n      }\n\n      grid.firstChild.appendChild(cards);\n      servicesUtil.model.content.appendChild(grid);\n      return grid;\n    }\n  },\n  view: {\n    /*\n     * creates a jumbotron element.\n     * @param {string} text - the text to display inside the jumbotron.\n     * @returns {HTMLElement} jumbotron - div cotaining the jumbotron.\n     */\n    createJumbotron: function createJumbotron(text) {\n      var jumbotron = document.createElement(\"div\");\n      var jumbotronText = document.createElement(\"div\");\n      jumbotron.classList.add(\"jumbotron\");\n      jumbotronText.classList.add(\"jumbotron__text\");\n      jumbotronText.innerHTML = text;\n      jumbotron.appendChild(jumbotronText);\n      return jumbotron;\n    },\n\n    /*\n     * creates the grid layout containing the cards.\n     * @returns {HTMLElement} grid - a div with a MDCGrid inside.\n     */\n    createGrid: function createGrid() {\n      var grid = document.createElement(\"div\");\n      var gridInner = document.createElement(\"div\");\n      grid.classList.add(\"mdc-layout-grid\");\n      gridInner.classList.add(\"mdc-layout-grid__inner\");\n      grid.appendChild(gridInner);\n      return grid;\n    },\n\n    /*\n     creates a html card element.\n     @param {object} params - object with function parameters.\n     @param {string} params.image - path to the card image.\n     @param {string} params.title - card title.\n     @param {string} params.subtitle - card subtitle.\n     @param {string} params.description - card description.\n     @param {string} params.route - the url to open when the user clicks on the card.\n     @returns {HTMLElement} cell - a single grid cell containing a card Element.\n    */\n    createCard: function createCard(_ref) {\n      var videoUrl = _ref.videoUrl,\n          title = _ref.title,\n          subtitle = _ref.subtitle,\n          description = _ref.description,\n          serviceUrl = _ref.serviceUrl;\n      var cell = document.createElement(\"div\");\n      var card = document.createElement(\"div\");\n      var cardPrimaryAction = document.createElement(\"div\");\n      var cardMedia = document.createElement(\"div\");\n      var cardTitleContainer = document.createElement(\"div\");\n      var cardTitle = document.createElement(\"h2\");\n      var cardSubTitle = document.createElement(\"h3\");\n      var cardDescription = document.createElement(\"div\");\n      var cardActions = document.createElement(\"div\");\n      cardActions.style.flexDirection = \"column\";\n      cardActions.style.alignItems = \"flex-start\";\n      var serviceTitle = document.createElement(\"h5\");\n      serviceTitle.style.margin = \"0 0 8px 0\";\n      serviceTitle.innerHTML = \"URL:\";\n      var serviceLink = document.createElement(\"textarea\");\n      serviceLink.value = serviceUrl;\n      serviceLink.style.fontSize = \"14px\";\n      serviceLink.style.width = \"100%\";\n      cardActions.appendChild(serviceTitle);\n      cardActions.appendChild(serviceLink);\n      var cardActionButtons = document.createElement(\"div\");\n      cardTitle.innerHTML = title;\n      cardDescription.innerHTML = description;\n      cardSubTitle.innerHTML = subtitle;\n      cell.classList.add(\"mdc-layout-grid__cell\", \"mdc-layout-grid__cell--span-4\");\n      card.classList.add(\"mdc-card\", \"homepage-card\");\n      cardPrimaryAction.classList.add(\"mdc-card__primary-action\", \"homepage-card__primary-action\");\n      cardPrimaryAction.addEventListener(\"click\", function () {\n        return window.open(serviceUrl, \"_top\");\n      });\n      cardMedia.classList.add(\"homepage-card__media\");\n      cardMedia.innerHTML = \"<iframe width=\\\"100%\\\" height=\\\"100%\\\" src=\\\"\".concat(videoUrl, \"\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\");\n      cardTitleContainer.classList.add(\"homepage-card__primary\");\n      cardTitle.classList.add(\"homepage-card__title\", \"mdc-typography\", \"mdc-typography--headline6\");\n      cardSubTitle.classList.add(\"homepage-card__subtitle\", \"mdc-typography\", \"mdc-typography--subtitle2\");\n      cardDescription.classList.add(\"homepage-card__secondary\", \"mdc-typography\", \"mdc-typography--body2\");\n      cardActions.classList.add(\"mdc-card__actions\");\n      cardActionButtons.classList.add(\"mdc-card__action-buttons\");\n      cell.appendChild(card);\n      card.appendChild(cardPrimaryAction);\n      cardPrimaryAction.appendChild(cardMedia);\n      cardPrimaryAction.appendChild(cardTitleContainer);\n      cardTitleContainer.appendChild(cardTitle);\n      cardTitleContainer.appendChild(cardSubTitle);\n      cardPrimaryAction.appendChild(cardDescription);\n      card.appendChild(cardActions);\n      cardActions.appendChild(cardActionButtons);\n      return cell;\n    }\n  }\n};\nvar _default = servicesUtil;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"3cea5c6fcf59b8823178d060ac6e415e","cacheData":{"env":{}}}